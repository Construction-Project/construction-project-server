%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.0
%%For: (yana) ()
%%Title: (005_emotions_12.eps)
%%CreationDate: 1/8/2017 11:13 AM
%%Canvassize: 16383
%%BoundingBox: 4 4 1236 994
%%HiResBoundingBox: 4.05713 4.28125 1235.4736 993.3647
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 619 498 619 498
%AI3_TileBox: 209.3682 213.3584 1027.0479 784.5581
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1231.416 989.084
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -195.8687 1018.8828 0.6667 1467 728 18 0 0 48 119 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MO
%AI7_Thumbnail: 128 104 8
%%BeginData: 22567 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C457D7DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA1
%7DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA1
%7DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA1
%7DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA17DA1
%7DA17DA17DA17DA17DA1767CA87DA77DA8A1A17DA77DA7A1A8A1A77DA77D
%A77DA77DA77DA8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A7A1A8A1A77D
%A87DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77D
%A77DA77DA77DA77DA77DA77DA77DA87DA77DA87DA77DA87DA77DA77DA77D
%A77DA77DA77DA77DA77DA77DA77DA77DA7A17D7D7DA8A17D5276527C5276
%5252527C76A77DA8A1A77DA8A1A87D7D5252527C5276527C527652765252
%527D527C527D767D7CA8A1A77DA8A1A77DA8A1A77DA8A1A87DA8A1A8A1A8
%A1A8A1A8A1A8A1A8A7A8A1A8A1A77DA8A1A8A1A8A1A77DA77DA77DA8A1A7
%7DA8A1A8A1A8A7A87DA8A1A77DA8A7A8A1A8A7A8A1A8A1A77DA87D7CA77D
%7651A8A8CFA8CAFD04A87D7C27A17DA77DA17DA75252527D7DA87DA87DA8
%7DA87DA87DA87DA17DA8FD047D5252277D7DA17DA77DA17DA77DA77DA17C
%7D767D527C527D5276527C52524B525152527C7DA77DA77D524B76515227
%524B52527652524B5251524B52527D7DA77DA1FD045251525152527D7DA7
%7D7DA1A1A752FD0CFFA152A8A1A87DA87D52A8FD19FF51A1A1A8A1A87DA8
%A1A87D5252765276527C76FD047DA8A7A8A1A87DA87D7D52527DA87D527D
%CAA8FFA8FFA8FFA8FFA8CAA8CAA8A87DA77D7D51A8A1A8527DFD06A87D7D
%52527DA87D7DA7767DFD0CFFA8527DA77DA17D7D7DFD1AFFA752A77DA77D
%A17DA77D5276A8A8FFA8FD0FFFCACA527CA17C7CFD13FFA87652A87D52FD
%0AFF7D527D7DA1A77D7DFD0DFF76A17DA8A1A852A8FD1AFFA17DA7A77DA8
%A1A7A17D7CFD15FFA8A152A852A8FD14FF7D76A1A152FD0BFF76A17D7CA8
%527DFD04FFA8FFFFFFA8FFFFFFA8767DA17DA77D527DFFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA852A87DA17DA77DA751A7FF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D7CA152A1FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA852A7767DFFFFA8FFFFFFA8FD04FF
%7D7C7DA1A77D7DFD0DFF52A87DA8A1A852A8FD1AFF7D7DA7A87DA8A1A8A1
%7DA8FD16FFA87CA852FD15FFA87DA1A17CFD0BFF7CA17D7CA8527DFD0CFF
%A8527CA77DA7A1527DFD1AFF7D52A87DA17DA77DA752A8FD16FF7D7CA17C
%A8FD14FFA852A87C7DFD0AFFCA767D7D7DA17D7CFD0CFFCA7D527CA87DA8
%52A8FD1AFFA15252A8A1A77DA8A77CA8FD16FFA852A852FD15FF7D7DA7A1
%51FD0AFF7D52A87D7CA7527CFFFFA8FFFFFFA8FD05FFA17C7C527DA77D7C
%7DFD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A77D5252A8
%7DA17DA752A8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCBFF7D527D
%7CFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7D52A77D7C277D7D
%7DA8A87D7D525251A17D7DA1A17D76FD0CFFA14B7C2776A1A8767DFD1AFF
%FD04527DA87DA8A17CA8FD16FFA876A852FD15FF76A1A1A8A1A77D7C277D
%517D527D7DA8A1A87D7DA77D7DA8FD0BFF527D7D7C27A17D7D7CFD19FFA8
%767D7D2752A1A17DA752FD17FF7D7CA1527DFD13FFA8527DA77DA17DA852
%5251A7A1A77DA77DA17D7DA1A17D52A8FD0AFFA8767DA8A1A17DA8527DA8
%FD18FFA852A8A7A152A8A1A77D7DFD17FF7D7CA87D52527D7DCAA8A8A8FD
%0BFFCA7D52A87DA8A1A8522776A87DA8A1A77DA8A1A87D7CA77D5252A8A8
%FD07FFA87C51A77DA17DA77D7D27A7A8FD15FFA8FF52767DA77DA77DA77D
%7D52FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF527D7DA77D
%7D52277C5251FD0552517C5276527D525227A17DA17DA77D7C7DA87DA17D
%A77DA17DA77D7DA1A1A87D765252527D527D7C7D525252A8A1A87DA8A1A8
%A17D517D7DA77DA17DA87DA8A1A8A7A8A1A8A7A87DA87DA17DA15252A1A8
%A1A87DA8A1A87D7DFD17FF7D7DA87DA8A7A1527D52A87DA77DA17DA17D7D
%767D7C7D7CA8A1A8A1A8A7A8A7A8A1A87DA8A7A8A1A8A1A87D7CA77DA77D
%7D7C7D7C7D527D767D7CA77DA77DA17DA77DA17D7D527C5276515251FD04
%52765252527652524B525152527D7DA77DA77DA17DA77D7D52FD17FF527D
%7DA17DA8525252A87DA77DA8A1A77DA8A1A77DA87DA77DA7A1A152765152
%277652524B52527D7DA8FD047DA8A1A7A1A8A1A8A1A8A7A8A1A8A1A87DA8
%A1A87DA8A1A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A1A77DA8A1A77DA87D7DFD17FF7C7DA8A1A8522776A8A1A8A1A1FD04
%7D76FD047DA8A1A7A17D515276A8A1A8A8FFA8A87DA152527DA87D7CA77D
%A87D7D767D767C527D527C527D7C7D767D767D767D7C7D7CA17DA77DA77D
%A17DA77DA77DA17D7D7DA77DA77DA77DA17DA77DA17DA77DA17D7D52FD05
%FFCBFFFFFFCBFFFFFFCBFFFFFFA8FD05FF527D7DA77D5276A87D7D515251
%524BFD0552515252A77D7D27A8A8FD0BFF7D527D7DA1A1A87C52527D527C
%527C527D527D767D527D5276527D767D527D525252A8A1A87DA8A17D5276
%52525176525252767DA87DA8A1A87DA8A1A87DA87D76A8FD15FFA876A1A8
%A1A7A1A8A1A7517DA7FFCFFD07FF7D527DA852A8FD0EFF52A17D7DA75252
%A8FD17FFA85252A87DA77D5252A7A7FD07A87D5252A77DA77DA17DA77DA1
%7DA151A7A8FD14FF7D52A77DA77DA77DA8527CA8FD0BFF7D52A77CA8FD0E
%FF767C7DA1A752A8FD1AFF527DA8A77676FD0BFFA8527CA87DA8A1A77DA8
%A1A7A17D527D7DCAA8FFA8FFCFFFA8FFFFFFCFFFFFFFA8FFA87D27A7A1A7
%7DA8A1A7A1767DFD0CFFA852A852A8FD0EFF52A17D7CA752CAFD04FFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFAFFF527D7DA152A8FD04FFA8
%FFFFFFA8FFFFFF7D527DA17DA77DA17DA77DA17D7D515227A152524B524B
%5252765252527652524B52517D7DA77DA17DA77DA151CAFFFFA8FFFFFFA8
%FFFFFFA8FFA8527D52A1FFA8FFFFFFA8FFFFFFA8FD04FF7C7D7DA1A17DA8
%FD1AFF7D7CA87D76A8FD0DFF52A7A1A8A1A87DA8A1A87DA8A7A87D7C7C52
%7DA87DA77DA77DA77DA77DA77DA8A1A8A1A8A1A87DA8A1A87D7DFD0EFF52
%A752A8FD0EFF52A17D7CA776FD1BFF527D7DA152A8FD0CFFA87C7DA77DA7
%7DA17DA77DA17DA7A15252527DA77DA77DA77DA77DA77DA77DA77DA87DA7
%7DA87DA17DA7A17C7DFD0EFF7D7C7C7DFD0EFF7CFD047D7CA8FD1AFF7D7D
%A87D7CA8FD0DFF52A1A1A77DA8A1A77DA8A1A7A17D27767DA8A1A77DA8A1
%A77DA8A1A87DA77D7D7C7D767C52A1A1A77DA852A8FD0EFF7D7D76A8FD0E
%FF52A77D7CA752A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFF527D7DA152A8FFFFA8FFFFFFA8FFFFFFA8FFA87C7CA77DA17DA7
%7DA17DA77DA1277D7DA77DA77DA17DA77DA17DA7FD055276527D527C277C
%7DA17D76A8FFA8FFFFFFA8FFFFFFA8FD04FFA8527D76FFFFFFA8FFFFFFA8
%FFFFFFA8FFA8527D7DA1A17DA8FD19FFCF7D7DA8A17DA7FD0DFF52A8A1A8
%7DA8A1A87DA8A1A87DA8A7A87DA8A1A87DA8A1A87DA87652A8FD09FF52A7
%A1A152FD0FFFA87C7D7DFD0DFFCF52A87D7DA852A8FD19FFCA52A17DA752
%A8FD0CFFA85252A87DA17DA77DA17DA77DA77DA77DA17DA77DA17DA77DA7
%7D52A7FD0AFF7D7CA7527DFD0FFFA8527D52FD0DFFA852A17DA1A776A8FD
%19FFA8767DA8A7767DFD0DFFA15252A8A1A77DA8A1A77DA8A1A87DA8A7A8
%7DA8A1A77DA8A1A152FD0BFF7DA1A776A1FD0FFFA87D7D7CFD0DFFA852A8
%7D7CA852A8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA852
%A77DA7527DFD04FFCBFFFFFFA8FFFFFFA8A17D5252A87DA17DA77DA17DA8
%7D7D527C767D7DA77DA17DA77C52A8FFFFFFA8FFFFFFA8FFFF7D7CA752A8
%FD04FFA8FFFFFFA8FFFFFFA8FFFFFF527D52CAFD04FFA8FFFFFFA8FFFFFF
%FD047DA1A77D7DFD19FFA152A1A8A17D76FD0DFF52527D767DA87DA8A1A8
%A1A75252527D767C51527DA87DA8A1A152FD0BFF7CA17D7DCAFD10FF7D7D
%7CA8FD0CFF7D7DA87D7CA8527DFD19FFA852527DA87D52A8FD0BFFA1767C
%5227517DA77DA7A17C277DA8FFA8FFA8CA7D5252A77DA77D76FD0BFF7D7C
%7D52FD11FF52A152A8FD0CFF527DA17D7DA17D7DFD19FF7DA77C76A1A852
%7DFD0AFFCA7D52A8A17D272776A8A17D51A8FD09FF7652A87DA176FD0BFF
%76A17D7DFD11FFFD047DFD0BFFA87C7DA87D7CA77C7CFFFFCBFFFFFFCBFF
%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFA8762752277D7D7D27767DA87DA8
%7DA87D7D7652277D7DA77DA752527DA127A8FFFFA8FFFFFFA8FFFFFFA852
%7DA7527DFFFFA8FFFFFFA8FFFFFFA87C7D7D52FD07FFCBFFFFFFCBFD05FF
%7C7D767DFD06FFCBFD04FFA852A77D7DA1A1A152FD19FF52A77D5227A8A7
%A7527C5276527C5276527D7CA7A1A8A1A87DA8A7A8527DFD0CFF7D7CA77D
%7CFD0AFFCF52A87D52A7FD10FF7C7DA752FD0BFF7D7DA1A87D7DA77D52A8
%FD17FFA1527DA87D7D7DA77DA77DA8A1A77DA8A1A77DA87DA17DA77DA17D
%A7A17C7DFD0CFFA852A87D52A8FD09FF527DA1A75252527D7DA8A7A8A1A8
%A8A8A7A8A1A87D5252A77D527DFFA8FD07FFCA767CA77D7DA1A1A8527DFD
%10FFCFFFA8CFA8A8A77D52A87DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8
%A1A77DA8A1A77DA876A1FD0CFFA87CA7A85252527D7DCFA8A8A1A852527D
%A8A1A87D7D525251A852524B7652525176527C7DA8A1A87D52527D7DA8A7
%A87DA8A77D52A8A1A87D7CA77DA12752767D767D767D527D7C7D767D767D
%527D527C527C52524BA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA7
%7DA17DA77DA17D7C52FD05FFCBFFFFFFA8FFFF7D52A77DA77C7D4B527652
%52524B7C7DA77DA77DA77DA8767C527C7DA17DA77DA77DA87DA77DA77DA7
%7D7D525251A727FD0452A17DA77D7DA1A1A8A1A87D7D7C7D527C527D527D
%527D767D527D767D527C527D7CA8A1A87DA8A1A87DA8A1A87DA8A1A87DA8
%A1A8A1A8A7A8A1A8A1A87DA87D52A7FD0BFF52A7A1A87DA8A77D5252A1A8
%A7A8A7A87DA8A1A87DA8A152527DA7A8A1A8A1A87DA8A1A87DA8A1A87DA8
%A7A87C7D527DA1A8A1A8A1A8A1A87D7CA77DA17DA87DA77DA8A1A77DA8A1
%A77DA8A1A77DA8A1A77DA8A1A77DA77DA17DA77DA17DA77DA17DA77DA17D
%A87D7D52765252527D7DA77DA87651A1FD08FFCF517C7DA77DA17D7D2752
%7CA87DA17DA77DA17DA77DA17D52277D7DA77DA17DA77DA17DA77DA17DA7
%7DA17DA77D5252527DA77DA77DA17DA7FD047DA8A1A77DA8A1A77DA8A1A7
%7DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8
%A7A75252527D7CA17D7D5252527DA1A87C5276CFFD04FFA87D277DA7A77D
%A8A1A727527DA87DA8A1A77DA8A1A77DA8A17D27A1A7A77DA8A1A77DA8A1
%A77DA8A1A77DA8A1A7A17D27767DA8A1A77DA8A1A77DA87D7CA77DA77DA1
%7DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA7
%7DA17DA77DA17D7C277DA8FFFFFFA8FFCAFFA87D27527DA87D5227525252
%7C764BA17DA77DA17DA776527DA77DA17DA77DA17DA77DA17DA77DA17DA7
%7DA17DA77DA17DA77DA17DA77DA17DA77DA727527DA77DA77DA17DA77DA1
%7D7DA1A1A8A1A87DA8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A87DA8A1
%A87DA8A1A87DA8A1A87DA8A1A8A17D52FD0DFF5252A1A8A1A87D7D7C527D
%7DA7A8A1A87DA8A1A8A1A8A1A87DA8A1A87DA8A1A87DA8A1A8A1A8A1A87D
%A8A1A87DA8A1A87DA8A1A87DA8A1A87D7DA7A87DA8A1A87DA8A1A87DA87D
%7DA77DA77DA77D7D7C7D7C7D7C7D7C7D7D7D7CFD047DA77DA7A1A87DA77D
%A77DA17DA77DA17DA7A17C52FD0FFF527CA1A17DA77DA7525252A17DA77D
%A17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17D
%A77DA17DA77DA17DA77DA77DA77DA17DA77DA17DA77DA17D7DA1A1A77DA8
%5252527D527C527C527C527C52765152525251765252527DA1A77DA8A1A7
%7DA8A1A77DA752FD10FFCF51A7A1A77DA8A1A852277CA87DA8A1A77DA8A1
%A77DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8A1A87DA8A1A8A1
%A8A1A8A1A8A1A8A1A8A7A87DA8A1A77DA8A1A87D7CA77DA75252A8FD05FF
%A8FFFFFFA8FFA8CAFD04A87DA77D7D27767DA77DA77DA77DA77DA7527DFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7C52A77DA17DA77DA74B52A1A17D
%A77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA77C7D7C
%7D527D7676527C5276527C52765276527D7DA77DA17DA77D7DA1A1A8A17C
%A7FD17FF527D7DA17DA17DA8A1A8A17CA7FD11FF7D7DA7A87DA8A1A87DA8
%A1A87DA8A1A87DA8A1A8A1A8A1A8A1A8A1A8A1A8A1A87DA8A1A7A1A8A77D
%51765276527D7C7D767D7DA77DA87DA87DA87D7D527DA7A87DA8A1A87D7C
%A77D7D52A8FD16FFA87D5252527D512727527DA751A8FD11FF7D52A87DA1
%7DA77DA17DA77DA17DA77DA77DA17D7D767D7C7D7C7D7C7D7DA77DA17DA8
%27527DA751A1A8FD13FF51A17DA17DA7FD047DA87D7CA8FD17FFA7A87D7D
%5276527D7DA8A17C7DFD11FF527DA1A8A1A77DA8A1A77DA8A1A7A1A15252
%52765276527D7C7D5252527DA1A8A1A7A17D2752517DFD15FF7D7CA8A1A7
%7DA87D7CA77D7D52CAFD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FF7D2752527D7DA87DA17DA77C52A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8527DA17DA77DA17DA77DA7527DA1A1277DA7CAA8FD07FFA8A84B7D7DA7
%7DA17D764B767DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCBFF7D7C
%7DA77DA17D7DA1A1A87D7CA8FD17FF527DA7A8A1A8A1A87DA8A1A8527DFD
%0EFFCA527CA87DA8A1A87DA8A1A8A752277D7C7DFD0DFFA852A8A1A87DA8
%A77D51A7FD15FF7D76A8A1A87DA87D7DA77DA152CAFD17FF767DA77DA17D
%A77DA17DA77DA7277DFD0CFFA85252A87DA17DA77DA17DA77DA77D525252
%7CFD0DFFA7527DA77DA17DA7A17D52FD15FF7D7C7DA77DA17D7DA1A1A77D
%7CA8FD17FF52A77DA8A1A77DA8A1A77DA8A1A75152A8FD08FFCA765276A8
%7DA8A1A77DA8A1A77DA8A1A876527DA8FD0DFFA852A87DA8A1A77DA87D7D
%FD15FFA77CA87DA8A1A87D7CA77DA751A8FFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFF7D527DA17DA77DA17DA77DA17DA77DA75252517D7D
%A87DA8A1A127527DA87DA17DA77DA17DA77DA17DA77DA776527DFFA8FFFF
%FFA8FFFFFFA8FFFFFFA87C7DA17DA77DA17DA152FD05FFA8FFFFFFA8FFFF
%FFA8FFFFFFCBFFFFFF527D7DA17DA77D7DA1A1A8A17C7DFD16FF7D76A87D
%A8A1A87DA8A1A87DA8A1A87DA8A7A152765252277DA7527DA8A1A87DA8A1
%A87DA8A1A87DA8A1A87DA87D7DFD0EFF52A87DA8A1A87DA8A7527DFD14FF
%767DA87DA8A1A87D7CA77DA77D5252A8A8FD0FFFA8CF7D7C27A77DA17DA7
%7DA17DA77DA17DA77DA17DA77DA77DA8A1A1277D7D5252A87DA77DA77DA1
%7DA77DA17DA77DA17D7D7DFD0DFFA8767DA77DA77DA17DA87D5276A8A8FD
%0DFFA8A87D5252A87DA17DA7FD047DA8A1A87D7C5252527C767D7DA77D7D
%7DA17DA17C7D5252517652A1A1A8A1A77DA8A1A77DA8A1A77DA8A1A77DA8
%A1A77DA8A1A752767C5252A1A7A87DA8A1A77DA8A1A77DA8A1A87CA1FD0E
%FF52A8A1A77DA8A1A77DA87D5251FD04527D527D527D767D527C52525176
%7DA87DA8A1A77DA87D7CA77DA77DA17DA77D7D767D5276527651524B7652
%76527D7C7D7DA87DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17D
%A77DA77652524B2027517D7DA77DA17DA77DA17DA77D7D52FFFFFFA8FFFF
%FFA8FFFFFFA8FFA8527DA77DA17DA77DA17DA7A1A77D7D7C7D7C7D527C52
%7D7C7D767D7DA77DA77DA17DA77DA17D7DA1A1A8A1A87DA8A1A8A1A8A1A8
%A1A8A7A8A1A8A7A8A1A8A1A8A1A8A1A87DA8A1A87DA8A1A87DA8A1A87DA8
%A1A87DA8A1A87DA8A1A87DA8A7A77D7D525276A8A1A87DA8A1A87DA8A1A8
%7D7DFD0EFF52A8A1A87DA8A1A87DA8A1A87DA8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A87DA8A1A87DA8A1A87DA87D7DA77DA77DA17DA8A1A77DA8A1A77DA8
%A1A77DA87DA77DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA1
%7DA77DA17DA77DA17DA77DA7A1A8A7A77DA77DA17DA77DA17DA77D7D52FD
%0DFFCA7D7DA77DA17DA77DA17DA77DA77DA77DA17DA77DA17DA77DA77DA8
%A1A77DA8A1A77DA77DA17D7DA1A1A77DA8A17D52765276527C5252527652
%7C527D7C7D7DA8A1A77DA8A1A87DA8A7A87DA8A1A77DA8A1A77DA8A1A77D
%A8A1A77DA8A1A87DA17D7D7CFD047DA8A1A77DA8A1A77DA87D7DFD0EFF7C
%A77DA8A1A7A1A8A7A77DA77DA17DA8A1A87DA8A1A8A1A17C7D527D767652
%7C527C7DA8A1A87D7CA77DA17D764B7D7DFD07A87DA87D7D767D525251A7
%A1A77DA17C7D525227527DA77DA17DA77DA17DA77DA17DA77DA77D7D5152
%4B52527652525152517D7DA77DA77DA17D7D52FD05FFA8FFFFFFA8FFFFFF
%A87D7DA77DA77D7C4B524B524B5252527CA776A77DA77D52277C7C7D76FD
%047DA7765276A77D7DA1A1A8A1A152A8FD10FFCA7D527D527C527C515227
%527DA8A1A87DA8A1A87DA8A1A87DA8A1A8525252A1A7FFA8CFA8CFA8A87D
%7D52527CA8A1A87DA87D7DFD0EFF7DA152A8A87C52FD04A8FFA8FF7D52A1
%5227A1A77D52FD0BFF7D76A1A87D7CA77DA7527DCAFD11FFA876767D7C7D
%525252A7A1A77DA77DA17DA77DA77DA87DA17DA14B52A1FD0BFFA8CA7D52
%51A77DA17DA176FD0DFFA87D7D27277D51A8FD08FF527D7D274B7627A8FD
%0BFFA8517DA17D7D7DA8A17D7DFD12FFCFA1A7525252A7A7A8A1A8A7A8A1
%A8A1A7A1A87D7652A8A77D27A7FD10FFA87651A8A1A77D7DFD0EFF52A87C
%52527DFD09FFA152A87D52527DA8FD0BFFA8767CA87D7CA77DA752A8FD04
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA852277C7D7D515252522752527C76
%A77D7C5127207D7D7D27A8FD04FFA8FFFFFFA8FFFFFFA8FD05FFA87651A7
%7DA752FD07FFCBFFFFFFCBFFA8527DA8525276FFFFFFA8FFFFFFCBFF7D52
%7DA87D5227A8FFFFA8FFFFFFA8FD05FF527D7D7DA1A1A8A776A8FD12FFA8
%52A8A77D52FD07A87C7C5252767652A8A1A852A7FD14FFA8767CA8A17DA8
%FD0DFF52A8A1A87D7DFD09FFA852A8A1A8A77DA7FD0CFF7D76A87D7DA77D
%A852A8FD12FFA1527DA852A8FD09FFA87D5252A87DA75276FD16FF7D527D
%A752A8FD0CFFA8527DA77DA152FD09FFA8527DA77DA752A7FD0CFF7D52A1
%7DA1A1A7A17CA8FD12FFA852A8A17CA8FD09FFA85276A87DA8A152A1FD16
%FFCA52A1A77D52FD0CFF7D52A87DA87D76A8FD09FF52A77DA8A7767DFD0C
%FFA752A87D7CA77DA752A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D
%527DA752A8FFFFA8FFFFFFA8FFFFA851A87DA17D7D52CAFD04FFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFA87C52A77D5252FD07FFA8A87C524BA7
%7DA17DA752A8FD08FFA7527DA17DA75252A8FD09FFCAA8517DA17DA1A1A8
%A17D7DFD12FFA852A8A17DA8FD09FFA87CA7A87DA87D7CCAFD17FF7C7DA7
%A87D7C527D527D767C5276527C7DA8A1A87DA8A77C52FD07FFA87C52A87D
%A8A1A852527DFD05A87DA17C76517DA1A87D7CA77DA7527DFD12FF7D76A1
%A752A8FD09FFA852A87DA17D7D52FD17FFA87C52A87DA77DA77D7D7CFD04
%7DA8A1A77DA77DA17DA77D52517D767D5252515252A77DA17DA77DA776FD
%08527D76A17DA7FD047DA8A17D76FD12FF7D76A8A776A8FD09FFA17CA1A8
%A1A87D76A8FD17FF527D7DA8A1A77DA8A1A87DA8A1A77DA8A1A77DA8A1A7
%7DA8A17D7C7D7D7D7CA1A1A87DA8A1A8A1A8A1A8A7A8A7A8A7A8A7A8A1A8
%A1A77DA87D7CA77DA77C52A8FFFFFFCBFFFFFFCBFFFFFFCBFD05FF527D7D
%A852A8FD04FFA8FD04FF7D76A77DA77DA14BA8FFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFFFCBFFFFFF7D527DA17DA77DA17DA77DA17DA77DA17DA77D
%A17DA77DA17DA77DA77DA77DA77DA77DA77C7D767C527C5276527C527652
%7D7DA17DA77DA17D7DA1A1A8A1A751A8FD10FFA8767DA8A77C7DFD09FF52
%A1A1A8A1A8A17D52FD16FF7D76A87DA8A1A8A1A8A7A8A1A8A1A87DA8A1A7
%7DA8A1A8A1A8A1A87DA8A1A7A1A8A1A15276527D7DA8A7FD05A87D7D4B7D
%A1A8A1A87DA87D7DA77DA7A17D277DA1CFCAFD09FFCFA87D5252A77DA77D
%5252FD04A8CAA8A15276A1A17DA77DA77D527DFD14FF7D27A87DA17DA77C
%7C5252515252524B52527C52525276525252A17DA17DA852527DA8527DA8
%FD0CFFA851A17DA77DA17D7DA1A1A77DA8A7A1FD05527D7DA17DA77D7D52
%76525252A8A1A77DA8A17C51FD045276527D7DA8A1A77DA8A1A87D52A1FD
%11FFCAA14BA17DA8A1A751767CA17DFD04A8FFA8FFA8FFA8FFA8FFA87D51
%A8A1A7A1A127525276A8FD0EFF7C7DA87DA8A1A87D7CA77DA17DA77DA87D
%A17C7D527C52765276527D767D7DA77DA7A17D4B76A1A77DA17DA17DA87D
%A17DA77DA17DA77DA776517CFD0FFFA77627A17D2751A8767CA8FD11FFA8
%7652A77DA17D76525252CFFFFFA8FFFFFFA8FFFFFFA8FFFFFF527D7DA17D
%A77D7DA1A1A87DA8A1A77DA77DA17DA8A1A8A7CAA7A8A1A8A1A8A7A87D52
%20527DA87DA8A1A8A1A8A1A87DA8A1A87DA8A1A87DA87D5252A8FD0AFFCA
%CA7C5252A8A7A8FD04527DFD13FF7D7DA7A87DA8A15252A7A8FD0EFF7D7D
%A87DA8A1A87D7CA77DA77D525252515251FD0552517C7CA1A1A77C525252
%277CA1A87DA17DA77DA17DA77DA77DA87DA17DA77DA17DA8A17C27527CA8
%A8FFA8A8A7A87D7627527DA77DA77DA1517C76A8FD13FF7D52A87DA17DA7
%A17651FD0FFF52A17DA17DA7FD047DA8A1527DFD07FFA8CAA8A87D765276
%527C7D7C52A7A8A8A1A8A7A8A1A8A1A77DA8A17D517DA1A77DA8A1A77DA8
%A7A87C7D5252527C52527CA852A1A1A8A1A77DA8A1A75276A8FD13FFA77C
%A1A8A1A77DA87D76A8FD0EFF7C7DA8A1A77DA87D7CA77D7D52FD0EFFA852
%A17D5252A7FD045227525276527D7D7D525227277DA77DA17DA77DA77DA8
%7DA7A1A87D7D7DA17C527D767CA77DA77DA17DA77DA74BA8FFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FD04FFA851A77DA77DA17DA752A8FD04FFA8FFFFFF
%A8FD05FF52A17DA77DA17D7DA1A1A876A8FD10FF76527DA8527DFD06A87D
%7D5252527D52527DA8A1A87DA8A7A7767C52525276527DA1A8A1A87C767D
%7CA1A8A1A87DA8A1A8A17DA8FD13FFA876A1A8A1A87DA8A77CA7FD0DFFA8
%7C7DA8A1A87DA87D7DA77D7CA8FD0FFFA8527DA87D52A8FD09FF7DA75252
%7DA77DA77DA77D524B767DA87DA87D7D515252A87DA7527C527D7DA77DA1
%7DA77DA752A8FD13FFA852A77DA77DA17DA852A7FD0DFFA852A77DA77DA1
%7D7DA1A1A852A8FD10FF7CA77DA776FD0AFFCA5252A1A8A1A77DA87D527C
%FD09FFA85251A8A1A8525252A87DA8A1A77DA8A17C7DFD13FFA776A7A77D
%A8A1A7A17D7DFD0DFFA77CA7A77DA8A1A87D7CA77D52A1FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA87C7DA77C76A8FFA8FFFFFFA8FFFFFF7D527DA77DA7
%7DA77D52A7FD05FFA8FD06FF7D27A77DA751277CA77DA77DA17DA7527DFD
%04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA851A87DA17DA77DA7767DFFFF
%CBFFFFFFA8FFFFFFA8FFFFA851A87DA17DA77D7DA1A1A852FD11FF52A7A1
%A752FD0AFFA876A87DA8A1A8A152A1FD0EFF7D52A8A1A852277DA8A1A87D
%A8A77D7DFD13FFA87CA7A87DA8A1A8A1A152FD0DFF7D7DA7A87DA8A1A87D
%7CA7A152A8FD0FFFA87CA1A77D7CFD0AFF7D7CA1A17DA77D7D52FD0FFFA8
%527DA77DA8527D7DA77DA17DA8767DFD13FFA851A87DA17DA77DA77D76A8
%FD0CFF7D52A87DA17DA7FD047DA852A8FD0FFFA852A8A1A152FD0AFFA852
%A8A1A77DA852A8FD10FF527DA1A77DA8A1A77DA8A1A77D7D7DFD13FFA776
%A1A8A1A77DA8A1A852A8FD0CFF767D7DA8A1A77DA87D7CA77D76A8FFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFA8527DA77D76A8FFFFFFA8FFFFFFA9FF7D7C
%7DA77DA17D527DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7D52A77DA17DA7
%7DA17DA77DA77C7DFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD04FFA852A77D
%A77DA17DA7A1527DFD0CFF767CA77DA77DA17D7DA1A1A876A8FD0FFFA852
%A8A1A752FD0AFF7D7CA8A1A87DA852A8FD10FF527DA7A8A1A8A1A87DA8A1
%A8A1A176FD13FF7D7DA1A8A1A87DA8A1A8767DFD0CFF52A1A1A8A1A87DA8
%7D7DA77D7C7DFD0FFF7D7D7DA77D76A8FD09FF527D7DA77DA17D7C7DFD10
%FF7C2752527D7DA77DA17DA77DA77D7CFD13FF7D52A77DA77DA17DA77D7D
%52FD0BFFA8767DA77DA77DA17D7DA1A1A876A7FD0FFF7D7DA87DA776FD0A
%FF7D7DA87DA8A1A87D52FD10FFA7A87D7D52767DA8A1A77DA8A1A852FD13
%FF527DA1A77DA8A1A77DA87D76A7FD0AFFA852A8A1A77DA8A1A87D7CA77D
%7D52FFFFFFCBFFFFFFCBFFFFFFCBFFFFFF51A17DA17D76A8FFA8FFFFFFA8
%FFFFFF52A17DA17DA77DA7517DFD0EFF525252765252272752A77DA17DA7
%A15252FD11FF7C527DA77DA17DA77DA17DA8527DA8FD09FF527D7DA77DA1
%7DA77D7DA1A1A87D52A8FD0DFF7D7CA7A87DA852A8FD08FFA87CA1A87DA8
%A1A8A1A84BA1FD0CFF52527DA17DA17D7D527CA1A87DA8A1A87D52527D7D
%A8A8CFA8FFA8CAFD04A87D7D52527DA8A1A87DA8A1A87DA8A77D52CFFD08
%FF5252A1A8A1A87DA8A1A87D7CA77DA752527CA8A8FD07FFA8A87C527CA8
%7DA17D7D4BA1A8FD05FFA85252A87DA17DA77DA17DA72752A8FD08FFA852
%527DA87DA77DA77DA77DA77DA17DA77DA77D7D52524B5252524B524B5251
%525276527DA1A77DA77DA17DA77DA17DA77D5251A1A8A8A1A87C5227767D
%A77DA77DA17DA7FD047DA8A1A87DFD04527D767D767D525251527DA87DA8
%A1A7A17DFD0952A77DA8A1A77DA8A1A7A1A8525252A8A8CAA8A87D7C4B7D
%A7A77DA8A1A77DA8A1A77DA8A1A77DA8A1A77DA8A7A8A1A8A1A77DA8A1A8
%A1A8A7A87DA8A1A77DA8A1A77DA8A1A77DA8A17D51FD04527D7DA7A1A8A1
%A77DA8A1A77DA87D7CA77DA77DA77DA17C7D52765276527D7C7D7DA77DA1
%7DA77DA17DA87D7D767D7C7D7DA87DA17DA77DA17DA77DA17DA87D7C4B52
%5252275276A17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA1
%7DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA77DA7
%A1A77DA77DA17DA77DA17DA77DA17D7DA1A1A8A1A87DA8A1A8A1A8A7A8A1
%A8A1A8A1A8A1A87DA8A1A87DA8A1A8A1A8A1A8A1A8A1A87DA8A1A87DA8A1
%A87DA8A1A8A1A8A1A87DA8A7A87DA8A1A87DA8A1A87DA8A1A87DA8A1A87D
%A8A1A87DA8A1A87DA8A1A87DA8A1A87DA8A1A87DA8A1A87DA8A1A87DA8A1
%A87DA8A1A87DA8A1A87DA8A1A87DA8A1A87DA8A1A87DA87D7CA77DA77DA1
%7DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA7
%7DA17DA77DA17DA77DA17DA77DA17DA77DA77DA77DA17DA77DA17DA77DA1
%7DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA7
%7DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA1
%FD047DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA7
%7DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA7
%7DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA7
%7DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA7
%7DA77DA77DA77DA77DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (\322\360\340\361\361\350\360\356\342\352\340) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe Envelope) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\301\373\361\362\360\340\377 \347\340\353\350\342\352\340") (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\317\345\360\345\365\356\344") (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (\310\355\361\362\360\363\354\345\355\362\340\360\350\351 Adobe \357\356 \360\340\341\356\362\345 \361 \361\350\354\342\356\353\340\354\350) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\312\340\353\353\350\343\360\340\364\350\367\345\361\352\340\377 \352\350\361\362\374") (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (\321\356\361\362\340\342\355\373\345 \364\350\343\363\360\373 Adobe) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (GradientFill 1)
(GradientFill 1) 0 2 Bd
[
<
0000010204
>
<
0000000304
>
<
0000000102
>
0.000031
<
FFFEFDFCFB
>
<
FFFEFDFBFA
>
<
FFFEFDFCFB
>
4 %_Br
[
0.014221 0.016175 0.006104 0.000031 0.984314 0.980392 0.984314 2 50 100 %_BS
%_0.014221 0.016175 0.006104 0.000031 0.984314 0.980392 0.984314 2 50 100 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
([\721\756\742\754\745\771\745\755\750\745])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(\315\340\357\360\340\342\353\377\376\371\350\345 \344\353\377 \354\356\355\362\340\346\355\356\351 \356\341\353\340\361\362\350) Ln
0 A
0 J 0 j 1 w 10 M []0 d0 XR
0 996 m
1238 996 L
1238 0 L
0 0 L
0 996 L
(n) *
-0.5 996.5 m
1237.5 996.5 L
1237.5 0.5 L
-0.5 0.5 L
-0.5 996.5 L
(n) *
4.05713 993.3647 m
1235.4736 993.3647 L
1235.4736 4.28125 L
4.05713 4.28125 L
4.05713 993.3647 L
(n) *
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 43 42 41 0 100 Lb
(\321\353\356\351 1) Ln
0 A
u
0 O
0.310887 0.280217 0.331182 0.000031 0.709804 0.678431 0.635294 Xa
0 J 0 j 1 w 10 M []0 d1 XR
4.16504 993.2568 m
1235.3652 993.2568 L
1235.3652 4.38965 L
4.16504 4.38965 L
4.16504 993.2568 L
f
0 R
0.830076 0.700648 0.490211 0.980377 0 0 0 XA
0.216 w 22.9256 M4.16504 993.2568 m
1235.3652 993.2568 L
1235.3652 4.38965 L
4.16504 4.38965 L
4.16504 993.2568 L
s
U
u
u
*u
0 O
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
1 w 10 M171.7178 902.6108 m
191.436 891.5957 196.6133 879.6152 204.4761 861.4106 C
205.6221 858.7612 L
205.9072 858.1016 205.7295 857.2295 205.2256 856.8145 C
204.8086 856.4712 204.2983 856.5479 203.9731 856.959 C
201.916 859.355 198.2402 863.2363 192.5791 867.085 C
187.0527 870.8433 179.6372 874.5703 169.9893 876.8662 C
169.48 874.2246 169.0859 871.4888 168.6855 868.7051 C
165.9087 849.4053 162.814 827.8984 124.8608 828.9453 C
64.0054 830.6245 L
54.6572 830.8823 47.3315 834.0244 42.1743 838.6436 C
36.1431 844.0454 33.0474 851.4902 33.0942 858.7949 C
33.1558 868.4512 32.7051 878.2373 32.2549 888.0239 C
31.3491 907.7246 30.4429 927.4258 33.6758 946.6978 C
38.7534 976.9668 92.7739 971.813 127.3364 968.5156 C
131.3823 968.1294 135.1587 967.7695 138.5542 967.4941 C
172.5781 964.7393 175.9058 944.2471 174.3223 924.6855 C
173.9819 920.4785 173.4258 916.4326 172.9014 912.6128 C
172.4053 909.001 171.9365 905.5913 171.7178 902.6108 C
171.7178 902.6108 L
f
1 D
201.0098 863.6943 m
194.0947 879.5371 188.4136 890.3647 170.1763 900.3647 C
169.7871 900.5781 169.5313 901.1079 169.5654 901.7168 C
169.7563 905.1431 170.2783 908.9429 170.8345 912.9941 C
171.3604 916.8232 171.918 920.8789 172.2397 924.8564 C
173.7109 943.0283 170.5342 962.0723 138.3374 964.6787 C
134.938 964.9541 131.1514 965.3154 127.0957 965.7026 C
93.2632 968.9302 40.3833 973.9751 35.7251 946.2065 C
32.5557 927.3159 33.4526 907.8223 34.3496 888.3296 C
34.8003 878.52 35.252 868.7104 35.1895 858.9004 C
35.1489 852.4951 37.9453 845.8936 43.3921 841.0151 C
48.2573 836.6572 55.2163 833.6914 64.1484 833.4453 C
125.0034 831.7666 L
161.1128 830.77 164.0205 850.9756 166.6294 869.1074 C
167.1133 872.4717 167.5884 875.7695 168.229 878.8057 C
168.231 878.8052 L
168.3799 879.5234 168.9146 879.9985 169.458 879.8774 C
179.8057 877.5542 187.7256 873.604 193.5879 869.6177 C
196.5796 867.583 199.0371 865.5391 201.0098 863.6943 C
201.0098 863.6943 L
f
203.9731 856.959 m
203.7969 857.2578 L
203.8462 857.1445 203.9058 857.0444 203.9731 856.959 C
f
*U
U
0 D
58.5396 959.7915 m
69.7891 960.917 111.7896 962.792 130.9146 961.292 c
150.0396 959.7915 164.6641 954.9165 165.0391 938.417 c
165.4141 921.917 159.4141 857.042 147.0391 847.2915 c
134.6646 837.5415 89.2896 836.042 65.2891 843.917 c
41.2891 851.7915 44.6646 890.4165 41.2896 915.542 c
37.9141 940.667 46.9141 957.917 58.5396 959.7915 C
Bb
1 (GradientFill 1) 95.125 783.8398 87 244.2363 1 0 0 1 0 0 Bg
12.7823 243.9016 132.1253 -6.92439 27.877 787.3643 Xm
398.7373 7608.3584 132.1253 -6.92439 -370.8604 -6820.9941 Bc
12.7823 243.9016 132.1253 -6.92439 27.877 787.3643 Bm
398.7373 7608.3584 132.1253 -6.92439 40.6592 1031.2656 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
498.8804 454.4922 m
505.2827 445.3691 517.2695 433.2813 537.8325 425.1504 C
549.8242 420.4102 564.7236 417.0205 583.1191 416.3525 C
565.9858 421.1152 535.8228 432.7021 523.584 457.2783 C
523.27 457.9131 523.4092 458.7949 523.8955 459.248 C
524.0132 459.3584 524.1406 459.4326 524.271 459.4736 C
524.2705 459.4746 L
541.9893 465.0801 556.897 474.5723 567.0874 486.4033 C
576.8652 497.7549 582.2754 511.2529 581.5947 525.4888 C
580.7065 544.0454 569.6689 560.48 552.5425 572.0483 C
535.2451 583.7329 511.7837 590.416 486.2588 589.3286 C
486.2588 589.3281 L
485.5928 589.2983 L
460.3052 588.0884 437.8115 579.4502 421.8516 566.4268 C
406.0996 553.5732 396.7686 536.4741 397.5464 518.1318 C
397.5479 518.1318 L
397.5601 517.8594 L
398.166 505.187 403.5142 493.4961 412.3027 483.6709 C
421.4951 473.3936 434.4331 465.1748 449.6567 459.998 C
458.3853 457.0303 465.9268 454.9434 473.5513 454.0078 C
481.1665 453.0732 488.8955 453.2813 498.0161 454.8975 C
498.3545 454.9561 498.6685 454.792 498.8799 454.4912 C
498.8804 454.4922 L
498.8804 454.4922 L
f
537.1558 422.4375 m
516.541 430.5879 504.3291 442.7002 497.6729 452.0068 C
488.6221 450.4463 480.897 450.2617 473.2695 451.1973 C
465.5073 452.1504 457.8735 454.2588 449.0596 457.2559 C
433.5469 462.5313 420.3364 470.9375 410.917 481.4688 C
401.7139 491.7568 396.1099 504.0908 395.4658 517.5537 C
395.4536 517.8267 L
395.4551 517.8267 L
395.4541 517.8374 L
394.6226 537.3506 404.3657 555.3936 420.8281 568.8267 C
437.085 582.0923 459.9521 590.8887 485.6206 592.1167 C
486.2866 592.147 L
486.2866 592.1465 L
486.2905 592.1465 L
512.1616 593.2495 535.9717 586.4561 553.5513 574.5811 C
571.3027 562.5898 582.752 545.3794 583.6885 525.7944 C
584.416 510.5889 578.7183 496.2656 568.4136 484.3027 C
558.2583 472.5117 543.6016 463.0059 526.228 457.2334 C
543.8291 425.0215 594.0396 416.6064 595.8301 416.3154 C
596.3633 416.2646 596.7705 415.6719 596.7568 414.9355 C
596.7422 414.1543 596.2598 413.5078 595.6797 413.4912 C
571.1162 412.7637 551.9614 416.584 537.1558 422.4375 C
f
*U
468.6216 578.7017 m
520.6069 582.4526 547.249 566.7085 v
573.8911 550.9639 578.8584 508.9751 563.4087 492.5869 c
547.9585 476.1992 494.9404 446.7012 448.9023 465.8379 c
379.8813 494.5293 396.958 571.8599 468.6216 578.7017 C
Bb
1 (GradientFill 1) 486.5859 404.0645 89 248.8795 1 0 0 1 0 0 Bg
4.34354 248.8416 202.6638 -3.5375 376.3359 405.9893 Xm
139.9561 8018.0889 202.6638 -3.5375 236.3799 -7612.0996 Bc
4.34354 248.8416 202.6638 -3.5375 376.3359 405.9893 Bm
139.9561 8018.0889 202.6638 -3.5375 380.6797 654.8311 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
482.0005 712.1108 m
490.5493 707.1606 498.375 697.6104 506.7285 687.415 C
516.7988 675.124 527.6484 661.8828 541.2852 654.9546 C
541.8174 654.6836 542.0664 653.8716 541.8398 653.1406 C
541.6406 652.4961 541.1382 652.1304 540.6567 652.2388 C
540.6567 652.2378 L
525.8999 655.5835 508.0762 666.4106 489.3394 677.792 C
487.3579 678.9951 485.3799 680.1973 482.4604 681.9556 C
482.2842 680.1865 482.1387 678.4922 481.9985 676.8569 C
480.249 656.4482 479.2378 644.6563 437.5122 644.1899 C
376.2505 643.5044 L
368.4434 643.417 361.8247 645.562 356.5366 649.0859 C
350.5254 653.0913 346.2241 658.8892 343.835 665.2368 C
340.7788 673.3584 338.3242 690.4282 336.6641 708.5996 C
334.5771 731.4399 333.728 756.1328 334.5112 766.9087 C
337.0991 802.5283 393.8096 798.7466 430.0952 796.3267 C
434.3398 796.0439 438.3018 795.7793 441.8643 795.5991 C
485.2544 793.4023 483.5068 752.3394 482.3228 724.5117 C
482.1274 719.9189 481.9478 715.6963 482.0005 712.1108 C
482.0005 712.1108 L
f
1 D
505.2822 685.2827 m
496.8779 695.5405 489.0151 705.1362 480.5718 709.8081 C
480.2017 709.9888 479.9355 710.4536 479.9209 711.0254 C
479.8193 714.8945 480.0156 719.5024 480.2305 724.5503 C
481.3672 751.2651 483.0444 790.6875 441.6807 792.7813 C
438.1206 792.9614 434.1455 793.2271 429.8867 793.5107 C
394.416 795.8765 338.9795 799.5732 336.5952 766.7593 C
335.8262 756.1729 336.6748 731.7471 338.7471 709.0723 C
340.3833 691.1655 342.7739 674.417 345.7148 666.6025 C
347.9204 660.7441 351.9219 655.3716 357.5376 651.6294 C
362.5605 648.2832 368.8687 646.2466 376.3359 646.3296 C
437.5977 647.0156 L
477.3813 647.46 478.3105 658.2959 479.918 677.0503 C
480.1104 679.2988 480.313 681.6567 480.5791 684.0718 C
480.5889 684.249 480.623 684.4282 480.6846 684.6006 C
480.9414 685.3169 481.5723 685.6436 482.0928 685.3311 C
483.9146 684.2354 487.1138 682.292 490.2695 680.375 C
504.8496 671.5186 518.873 663.0005 531.2373 658.144 C
521.4487 665.5527 513.1318 675.7026 505.2822 685.2827 C
f
*U
0 D
383.52 654.1895 m
351.5645 655.8457 350.2427 678.7339 348.272 717.1011 c
346.3018 755.4688 339.083 786.3701 377.4902 785.7578 c
440.3252 784.7568 473.6245 804.2935 472.7139 725.3833 c
472.415 699.4717 472.0664 677.9634 466.103 667.9629 c
454.7358 648.9004 414.5151 652.5825 383.52 654.1895 c
Bb
1 (GradientFill 1) 386.7402 608.8804 79 237.6835 1 0 0 1 0 0 Bg
45.3521 233.3166 152.3732 -29.6183 305.6108 624.6504 Xm
1511.7506 7777.2847 152.3732 -29.6183 -1206.1396 -7152.6348 Bc
45.3521 233.3166 152.3732 -29.6183 305.6108 624.6504 Bm
1511.7506 7777.2847 152.3732 -29.6183 350.9629 857.9668 Bc
f
0 BB
U
u
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
504.8774 899.6108 m
524.5952 888.5952 529.7725 876.6152 537.6353 858.4106 C
538.7813 855.7612 L
539.0664 855.1016 538.8887 854.2295 538.3853 853.8145 C
537.9683 853.4712 537.4575 853.5479 537.1323 853.959 C
535.0752 856.355 531.3994 860.2358 525.7388 864.085 C
520.2119 867.8428 512.7964 871.5703 503.1484 873.8662 C
502.6431 871.25 502.2515 868.5479 501.854 865.8052 C
499.0781 846.6592 496.0259 825.6147 458.0322 825.9443 C
264.4268 827.6235 L
255.1216 827.7041 247.8198 830.8027 242.6636 835.4209 C
236.5791 840.8711 233.457 848.4609 233.5034 855.7944 C
233.5649 865.4517 233.1147 875.2397 232.6646 885.0273 C
231.7583 904.7266 230.8521 924.4268 234.085 943.6973 C
235.1587 950.1011 238.3936 954.9326 243.1689 958.5332 C
247.791 962.0186 253.8682 964.3389 260.813 965.8159 C
269.9521 967.7598 300.3315 968.2539 335.3965 968.0317 C
391.3013 967.6782 459.2017 965.5068 471.7134 964.4941 C
505.7378 961.7393 509.0654 941.2461 507.4814 921.6841 C
507.1406 917.4766 506.5845 913.4316 506.0605 909.6123 C
505.5645 906.0005 505.0962 902.5908 504.8774 899.6108 C
504.8774 899.6108 L
f
1 D
534.1689 860.6938 m
527.2539 876.5366 521.5732 887.3647 503.3354 897.3647 C
502.9468 897.5781 502.6904 898.1079 502.7246 898.7163 C
502.9155 902.1431 503.4375 905.9424 503.9941 909.9932 C
504.5195 913.8218 505.0767 917.8779 505.3989 921.855 C
506.8706 940.0273 503.6934 959.0718 471.4966 961.6787 C
459.0195 962.689 391.186 964.8555 335.2861 965.2085 C
300.3311 965.4297 270.0742 964.9429 261.042 963.022 C
254.3306 961.5947 248.4956 959.3809 244.1226 956.0835 C
239.9028 952.9023 237.0562 948.7021 236.1343 943.2065 C
232.9653 924.3169 233.8618 904.8247 234.7588 885.333 C
235.21 875.5225 235.6611 865.7109 235.5986 855.8999 C
235.5581 849.458 238.3813 842.7188 243.8818 837.7925 C
248.7383 833.4424 255.6646 830.5229 264.5454 830.4463 C
458.1509 828.7671 L
494.3223 828.4531 497.1899 848.2275 499.7983 866.2188 C
500.2783 869.5283 500.75 872.7822 501.3882 875.8057 C
501.3901 875.8052 L
501.5391 876.5234 502.0737 876.998 502.6177 876.877 C
512.9648 874.5542 520.8848 870.604 526.7471 866.6177 C
529.7393 864.583 532.1963 862.5386 534.1689 860.6938 C
534.1689 860.6938 L
f
537.1323 853.959 m
536.9565 854.2578 L
537.0054 854.144 537.0649 854.0439 537.1323 853.959 C
f
*U
U
0 D
258.1987 956.7915 m
269.4487 957.9165 444.9487 959.7915 464.0737 958.2915 c
483.1987 956.7915 497.8237 951.9165 498.1987 935.4165 c
498.5737 918.9165 492.5732 854.0415 480.1987 844.2915 c
467.8237 834.5415 288.9487 833.042 264.9487 840.9165 c
240.9487 848.791 244.3242 887.4165 240.9487 912.5415 c
237.5737 937.667 246.5737 954.9165 258.1987 956.7915 C
Bb
1 (GradientFill 1) 354.9443 722.6929 86 336.673 1 0 0 1 0 0 Bg
23.4851 335.8529 265.025 -18.5323 221.1909 732.0459 Xm
545.8416 7805.9067 265.025 -18.5323 -324.6509 -7073.8613 Bc
23.4851 335.8529 265.025 -18.5323 221.1909 732.0459 Bm
545.8416 7805.9067 265.025 -18.5323 244.6758 1067.8989 Bc
f
0 BB
U
u
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
294.814 679.564 m
314.5269 668.5493 319.7036 656.5693 327.5654 638.3657 C
327.9404 637.498 328.3218 636.6152 328.7104 635.7183 C
328.9956 635.0586 328.8179 634.1865 328.3145 633.772 C
327.8975 633.4282 327.3867 633.5049 327.0615 633.916 C
325.0044 636.312 321.3291 640.1929 315.668 644.0425 C
310.1416 647.8003 302.7256 651.5278 293.0781 653.8232 C
292.5732 651.2075 292.1816 648.5049 291.7837 645.7627 C
289.0073 626.6162 285.9556 605.5723 247.9619 605.9014 C
66.3564 607.5811 L
57.29 607.6646 50.4175 610.6216 45.4712 615.0522 C
39.3818 620.5059 36.2085 628.1919 35.4409 635.5459 C
35.4141 635.8032 L
32.5645 663.0977 23.6875 748.1289 28.5142 776.9048 C
29.5884 783.3081 32.8232 788.1401 37.5986 791.7407 C
42.2207 795.2256 48.2979 797.5464 55.2427 799.0229 C
64.0884 800.9043 93.5493 801.3779 128.0854 801.1646 C
186.1255 800.8071 258.606 798.5107 271.3843 797.7021 C
299.7471 795.9063 304.291 767.9297 302.4175 738.3345 C
301.5781 725.0703 299.4443 711.5425 297.6182 699.9619 C
296.3545 691.9463 295.2383 684.8691 294.814 679.564 C
294.814 679.564 L
f
1 D
324.0986 640.6514 m
317.1836 656.4937 311.5024 667.3213 293.2646 677.3218 C
293.2651 677.3223 L
292.8706 677.5386 292.6138 678.0801 292.6558 678.6958 C
293.0234 684.2988 294.2104 691.8237 295.5659 700.4194 C
297.3818 711.9365 299.5039 725.3906 300.3306 738.4507 C
302.1128 766.5957 297.8574 793.1968 271.1841 794.8853 C
258.4365 795.6924 186.0269 797.9834 127.9751 798.3413 C
93.5493 798.5537 64.2095 798.0874 55.4717 796.2295 C
48.7603 794.8018 42.9258 792.5884 38.5522 789.291 C
34.3325 786.1094 31.4854 781.9092 30.5635 776.4136 C
25.8193 748.1289 34.6553 663.4897 37.4917 636.3208 C
37.5186 636.0635 L
38.2139 629.4019 41.1143 622.417 46.689 617.4233 C
51.3354 613.2617 57.8389 610.4834 66.4746 610.4033 C
248.0801 608.7241 L
284.2515 608.4106 287.1191 628.1846 289.728 646.1758 C
290.208 649.4854 290.6797 652.7393 291.3184 655.7632 C
291.3198 655.7622 L
291.4688 656.4805 292.0039 656.9556 292.5474 656.8345 C
302.8945 654.5117 310.814 650.5615 316.6768 646.5747 C
319.6689 644.54 322.126 642.4956 324.0986 640.6514 C
324.0986 640.6514 L
f
327.0615 633.916 m
326.8857 634.2148 L
326.9346 634.1016 326.9941 634.0015 327.0615 633.916 C
f
*U
U
0 D
52.6284 789.9985 m
63.8784 791.124 239.3784 792.999 258.5034 791.499 c
277.6284 789.9985 292.2529 785.1235 292.6279 768.624 c
293.0029 752.124 284.0029 640.749 271.6284 630.999 c
259.2534 621.249 83.3784 611.499 59.3784 619.374 c
35.3779 627.2485 38.7534 720.6235 35.3784 745.749 c
32.0029 770.874 41.0029 788.124 52.6284 789.9985 C
Bb
1 (GradientFill 1) 167.2642 554.7354 91 318.6399 1 0 0 1 0 0 Bg
-5.56105 318.5914 264.5927 4.6185 33.8159 552.4058 Xm
-134.1143 7683.3755 264.5927 4.6185 167.9302 -7130.9697 Bc
-5.56105 318.5914 264.5927 4.6185 33.8159 552.4058 Bm
-134.1143 7683.3755 264.5927 4.6185 28.2549 870.9971 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
787.6025 615.4775 m
784.9395 611.0508 781.9199 606.6191 778.543 602.4829 C
775.0107 598.1592 771.082 594.1514 766.749 590.7988 C
763.4512 588.2471 760.5352 586.0981 757.9785 584.293 c
744.8486 575.022 735.9346 563.7061 749.9619 586.4453 c
754.7217 594.1621 761.0547 604.8442 766.6885 615.7192 C
764.5313 615.9868 762.2676 616.1772 759.9521 616.3716 C
742.8652 617.8062 723.0479 619.4712 725.3076 651.8994 C
728.8652 702.9639 L
730.6748 728.9409 750.5361 730.3301 763.8135 731.2578 C
764.8027 731.3271 765.752 731.3936 766.8555 731.4863 C
771.5693 731.8838 775.7988 732.2954 780.0283 732.707 C
797.2295 734.3813 814.4316 736.0552 831.0781 734.2568 C
852.1025 731.9849 852.2275 702.1333 849.3125 675.1499 C
848.5791 668.3667 847.6768 661.9077 846.8652 656.1089 C
846.3828 652.6553 845.9316 649.4307 845.5879 646.6792 C
841.1875 611.4531 815.7881 613.4497 796.7119 614.9497 C
793.4404 615.207 790.3604 615.4492 787.6025 615.4775 C
787.6025 615.4775 L
f
1 D
777.1719 604.5317 m
780.5918 608.7197 783.6328 613.2158 786.2988 617.6924 C
786.501 618.0625 786.8271 618.3047 787.1855 618.3037 C
790.0801 618.3037 793.3945 618.043 796.9287 617.7651 C
815.165 616.3311 839.4473 614.4224 843.5186 647.0161 C
843.8887 649.9844 844.3291 653.1309 844.8008 656.5015 C
845.6182 662.3525 846.5293 668.8701 847.2373 675.4204 C
850.0059 701.0405 850.0088 729.3716 830.8213 731.4448 C
814.3242 733.2275 797.1992 731.5605 780.0742 729.894 C
775.5098 729.4497 770.9453 729.0049 766.8848 728.6631 C
766.0586 728.5938 764.9609 728.5166 763.8184 728.437 C
751.3027 727.5625 732.582 726.2529 730.9502 702.8252 C
727.3926 651.7612 L
725.3262 622.1133 744.04 620.5415 760.1768 619.1865 C
763.1377 618.938 766.0146 618.6958 768.6494 618.3027 C
768.8223 618.2896 768.9922 618.2178 769.1445 618.0835 C
769.6182 617.6641 769.7305 616.7896 769.3965 616.1318 C
761.7959 601.2012 752.6191 586.2988 747.6826 578.5288 C
751.167 581.6392 756.8037 586.2915 765.7695 593.229 C
769.9482 596.4629 773.749 600.3408 777.1719 604.5317 C
f
*U
0 D
754.5215 721.3276 m
745.5215 719.0776 741.3965 713.4526 739.5215 696.2021 c
737.6465 678.9521 728.2715 636.5771 741.3965 630.5771 c
754.5215 624.5771 799.8965 623.0776 815.2715 623.8271 c
830.6465 624.5771 838.8965 638.4521 841.5215 665.8271 c
843.5508 686.9854 846.251 705.2314 840.1016 716.582 C
833.4795 730.02 769.3057 725.0239 754.5215 721.3276 c
Bb
1 (GradientFill 1) 778.96 556.3384 85 235.5489 1 0 0 1 0 0 Bg
20.5294 234.6526 115.1072 -10.0706 719.6982 561.5229 Xm
722.3995 8257.0693 115.1072 -10.0706 -2.70117 -7695.5469 Bc
20.5294 234.6526 115.1072 -10.0706 719.6982 561.5229 Bm
722.3995 8257.0693 115.1072 -10.0706 740.2275 796.1753 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
1143.9326 613.5586 m
1143.123 611.7847 1142.4824 610.208 1141.8838 608.7344 C
1139.1289 601.9585 1137.208 597.2339 1124.7168 585.729 C
1109.2949 571.5264 1103.0654 565.3584 1103.0479 565.3398 C
1102.5732 564.8647 1101.9199 564.9795 1101.5879 565.5967 C
1101.3154 566.105 1101.3457 566.7954 1101.6299 567.2891 C
1102.2314 568.4307 1113.9824 590.8003 1123.1494 613.7944 C
1120.6123 614.1465 1117.8613 614.3599 1114.9844 614.5825 C
1101.5205 615.625 1085.3838 616.875 1076.6982 632.7856 C
1072.1895 641.0464 1067.3506 673.0137 1063.873 706.8628 C
1059.9268 745.2671 1057.7051 786.2549 1059.6992 797.7583 C
1061.3115 807.0659 1068.2773 813.4043 1078.4043 817.6011 C
1078.4043 817.6025 L
1088.25 821.6831 1101.1563 823.7817 1114.9971 824.6548 C
1115.2285 824.6694 L
1134.9229 825.9121 1211.8027 830.7637 1214.8896 798.6943 C
1216.7598 779.2603 1214.0508 744.0903 1209.8057 710.3408 C
1204.625 669.1587 1197.084 629.9238 1192.7334 623.752 C
1183.2451 610.2925 1166.5195 611.7695 1152.9805 612.9648 C
1149.7275 613.252 1146.6631 613.5225 1143.9326 613.5586 C
1143.9326 613.5586 L
f
1 D
1140.0488 609.9966 m
1140.7451 611.709 1141.4961 613.5557 1142.4941 615.687 C
1142.4951 615.686 L
1142.6924 616.1055 1143.04 616.3877 1143.4268 616.3867 C
1146.3291 616.3867 1149.6611 616.0923 1153.2139 615.7788 C
1166.3008 614.6235 1182.4688 613.1958 1191.2432 625.6436 C
1195.3232 631.4316 1202.6152 669.9785 1207.7354 710.6772 C
1211.9521 744.1973 1214.6484 779.0654 1212.8066 798.2109 C
1209.9551 827.8267 1134.5439 823.0679 1115.2256 821.8491 C
1114.9932 821.8345 L
1101.3174 820.9717 1088.5928 818.9092 1078.9365 814.9077 C
1078.9355 814.9092 L
1078.9316 814.9077 L
1069.5576 811.0234 1063.1445 805.3579 1061.7383 797.2456 C
1059.7998 786.0591 1062.0313 745.5054 1065.9502 707.3691 C
1069.3896 673.8931 1074.1074 642.4004 1078.4092 634.5195 C
1086.5439 619.6172 1102.166 618.4072 1115.2012 617.3975 C
1118.7041 617.1265 1122.0264 616.8691 1124.9541 616.3774 C
1124.9541 616.376 L
1125.0645 616.3579 1125.1729 616.3154 1125.2773 616.2471 C
1125.7871 615.9106 1125.9775 615.0679 1125.7031 614.3652 C
1119.1621 597.6816 1111.084 581.0425 1106.6318 572.1924 C
1110.125 575.522 1115.6484 580.7261 1123.5869 588.0371 C
1135.6309 599.1304 1137.4463 603.5942 1140.0488 609.9966 C
f
*U
0 D
1066.2998 790.9165 m
1065.3721 766.1777 1077.707 641.4385 1091.2305 634.6631 c
1104.7539 627.8877 1160.7539 625.7715 1176.0781 626.6177 c
1199.2314 627.896 1208.4473 749.6206 1206.1689 792.1255 c
1204.0771 831.1509 1067.2275 815.6553 1066.2998 790.9165 c
Bb
1 (GradientFill 1) 1108.3457 563.687 82 316.4449 1 0 0 1 0 0 Bg
44.0406 313.3653 159.2849 -22.386 1031.3174 574.5127 Xm
1199.7793 8536.873 159.2849 -22.386 -168.4619 -7962.3613 Bc
44.0406 313.3653 159.2849 -22.386 1031.3174 574.5127 Bm
1199.7793 8536.873 159.2849 -22.386 1075.3584 887.8779 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
906.834 843.7949 m
904.1729 839.4873 901.1563 835.1885 897.7803 831.1982 C
894.2393 827.0127 890.3066 823.1665 885.9785 820.002 C
882.9131 817.7598 880.2109 815.8608 877.8369 814.2539 c
866.8877 806.8423 854.9004 793.9243 868.0928 814.5659 c
872.9521 822.1689 879.8691 833.4199 885.9561 844.9111 C
883.7656 845.2788 881.4941 845.5659 879.1709 845.8599 C
862.0996 848.0176 842.3018 850.5215 844.5586 882.8164 C
848.1162 933.7295 L
849.9287 959.6768 869.8086 960.2231 883.0986 960.5879 C
884.1152 960.6162 885.0889 960.6431 886.1396 960.6865 C
898.5586 961.2061 943.208 961.0776 982.7109 960.2715 C
1011.5049 959.6836 1037.5537 958.7329 1046.3623 957.4072 C
1072.6396 953.4531 1066.2227 907.8237 1062.1172 878.6304 C
1061.6348 875.1968 1061.1836 871.9907 1060.8398 869.2549 C
1059.585 859.2632 1056.5674 852.3462 1052.4414 847.6128 C
1048.3301 842.897 1043.1572 840.4004 1037.5547 839.2139 C
1027.6572 837.1172 949.4658 841.4492 918.3408 843.1729 C
912.7832 843.4805 908.7295 843.7056 906.834 843.7949 C
906.834 843.7949 L
f
1 D
896.4365 833.2783 m
899.8662 837.332 902.916 841.7148 905.5898 846.0947 C
905.5898 846.0942 L
905.8008 846.438 906.123 846.6538 906.4697 846.6382 C
908.0322 846.5718 912.3545 846.3325 918.5244 845.9907 C
949.582 844.2705 1027.6025 839.9482 1037.3252 842.0078 C
1042.5635 843.1167 1047.3672 845.4146 1051.124 849.7241 C
1054.8652 854.0156 1057.6104 860.3584 1058.7695 869.5918 C
1059.1406 872.5454 1059.5801 875.6724 1060.0518 879.0225 C
1063.999 907.0938 1070.1699 950.9697 1046.04 954.6006 C
1037.293 955.917 1011.3125 956.8633 982.5762 957.4497 C
943.1748 958.2539 898.5645 958.3789 886.1025 957.8574 C
885.2236 957.8213 884.1523 957.791 883.0371 957.7607 C
870.5342 957.4175 851.8301 956.9033 850.2012 933.5913 C
846.6436 882.6777 L
844.5752 853.0801 863.3086 850.7114 879.4609 848.6699 C
882.458 848.2905 885.3721 847.9224 887.9844 847.4189 C
887.9834 847.4141 L
888.1299 847.3862 888.2734 847.3154 888.4033 847.1978 C
888.8711 846.7725 888.9775 845.8989 888.6387 845.2476 C
880.9512 830.4722 871.6748 815.8242 866.7783 808.333 C
870.1836 811.2769 875.8281 815.7334 885.043 822.4722 C
889.2275 825.5327 893.0234 829.2437 896.4365 833.2783 C
f
*U
0 D
882.2754 950.6875 m
865.1191 949.166 857.7393 943.854 855.9277 926.6807 c
854.1172 909.5073 840.4512 867.7124 866.4463 860.6094 c
892.4414 853.5059 980.2881 848.2783 1009.9219 847.77 c
1039.5557 847.2622 1054.041 860.5225 1056.2373 887.8042 c
1057.9355 908.8901 1061.2383 926.9961 1048.1611 938.9023 C
1033.9512 952.9434 910.459 953.188 882.2754 950.6875 c
Bb
1 (GradientFill 1) 917.1377 706.2178 79 289.1628 1 0 0 1 0 0 Bg
55.1748 283.85 211.0867 -41.0311 811.0313 726.8428 Xm
1593.7827 8199.3037 211.0867 -41.0311 -782.7515 -7472.4609 Bc
55.1748 283.85 211.0867 -41.0311 811.0313 726.8428 Bm
1593.7827 8199.3037 211.0867 -41.0311 866.2061 1010.6929 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
649.7783 766.1523 m
646.8682 761.7153 643.5664 757.2686 639.8662 753.1152 C
636.0117 748.7876 631.7314 744.7832 627.0225 741.4424 C
620.8896 737.0918 616.0068 733.9253 612.2178 731.6362 c
604.7422 727.1182 594.438 716.0771 605.8872 732.7432 C
611.1616 740.4209 619.6943 753.2676 627.1113 766.3862 C
624.752 766.6567 622.2842 766.8472 619.7666 767.041 C
601.3491 768.4639 580.3115 770.0884 581.9922 802.54 C
588.3271 924.854 L
589.6733 950.8574 611.7354 952.2559 626.2725 953.1772 C
627.4023 953.249 628.4834 953.3174 629.6777 953.4097 C
643.2578 954.4585 691.959 956.2275 735.0029 957.0967 C
766.3857 957.7305 794.7871 957.8848 804.415 956.9312 C
809.7529 956.4023 813.8623 954.3281 816.9844 951.1079 C
820.1201 947.875 822.2451 943.5068 823.6104 938.4004 C
825.6553 930.7583 825.625 911.0298 824.668 888.5693 C
823.1318 852.4971 819.2246 809.2173 817.707 798.0811 C
816.3389 788.0347 813.0527 780.9946 808.5596 776.0947 C
804.1035 771.2354 798.4922 768.5342 792.4111 767.1167 C
781.624 764.603 696.3457 765.6157 662.4092 766.0186 C
656.2734 766.0913 651.8242 766.1445 649.7783 766.1523 C
649.7783 766.1523 L
f
1 D
638.5674 755.2476 m
642.3086 759.4463 645.6357 763.9604 648.5547 768.4561 C
648.7578 768.7754 649.0586 768.9785 649.3877 768.9775 C
651.0615 768.9775 655.7852 768.9214 662.5273 768.8413 C
696.4043 768.4395 781.5332 767.4282 792.1494 769.9023 C
797.8926 771.2412 803.1621 773.7588 807.2881 778.2583 C
811.3779 782.7183 814.377 789.1816 815.6406 798.4619 C
817.1523 809.5566 821.0449 852.6738 822.5752 888.6079 C
823.5186 910.7373 823.5723 930.083 821.6309 937.3418 C
820.3906 941.9775 818.4746 945.9297 815.6592 948.833 C
812.8311 951.75 809.0771 953.6318 804.166 954.1187 C
794.6465 955.0615 766.2998 954.9033 734.9336 954.27 C
691.9131 953.4009 643.2559 951.6343 629.6982 950.5874 C
628.7422 950.5137 627.5322 950.4365 626.2686 950.3564 C
612.5098 949.4849 591.6279 948.1611 590.4175 924.7822 C
584.0825 802.4683 L
582.5435 772.748 602.5063 771.2061 619.9834 769.8564 C
623.1924 769.6089 626.3213 769.3672 629.207 768.9697 C
629.207 768.9688 L
629.3789 768.9458 629.5469 768.8643 629.6934 768.7212 C
630.1514 768.2749 630.2363 767.3955 629.8838 766.7578 C
621.5322 751.7178 611.6719 737.4785 606.3169 729.7549 C
610.1021 732.8672 616.0977 736.8281 626.1133 743.9336 C
630.6875 747.1787 634.8369 751.0596 638.5674 755.2476 C
f
*U
0 D
623.0391 938.9424 m
604.3262 935.1504 596.2764 925.6704 594.3013 896.5986 c
592.3257 867.5264 583.9653 790.8608 612.3184 780.7485 c
640.6719 770.6372 743.8496 773.3599 776.1719 774.623 c
808.4951 775.8867 810.3867 799.271 812.7832 845.4063 c
814.6357 881.0645 819.0557 919.3145 804.793 938.4448 C
789.293 961.0928 653.7793 945.1719 623.0391 938.9424 c
Bb
1 (GradientFill 1) 678.6787 687.8564 82 350.5674 1 0 0 1 0 0 Bg
48.7896 347.1557 232.7123 -32.7056 563.1162 704.0977 Xm
1138.0872 8097.9102 232.7123 -32.7056 -574.9707 -7393.8125 Bc
48.7896 347.1557 232.7123 -32.7056 563.1162 704.0977 Bm
1138.0872 8097.9102 232.7123 -32.7056 611.9058 1051.2534 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
942.7979 621.9233 m
941.8496 620.312 941.1172 618.9282 940.4326 617.6357 C
937.2813 611.6855 935.084 607.5376 921.9336 597.561 C
905.71 585.2529 899.0752 579.855 899.0557 579.8394 C
898.5508 579.4307 897.9131 579.6362 897.6328 580.2988 C
897.4063 580.834 897.4824 581.5034 897.7861 581.9565 C
897.7852 581.958 L
897.8242 582.0176 911.1426 601.896 921.8877 622.4751 C
919.666 622.7871 917.1914 623.0439 914.5449 623.3184 C
899.665 624.8633 879.4697 626.9595 871.4971 641.5742 C
863.209 656.7681 890.6299 760.2437 897.7051 786.9434 C
898.085 788.374 898.4053 789.584 898.6582 790.5454 C
900.8418 798.8447 908.7559 803.3789 919.6924 805.9512 C
930.3193 808.4502 943.8574 809.1533 957.7031 809.7148 C
959.7041 809.7954 961.4795 809.8906 963.4453 809.9956 C
986.2598 811.2148 1032.5664 813.6899 1036.6055 787.7646 C
1040.7354 761.2646 1047.3271 715.0742 1050.1074 680.4233 C
1051.9824 657.0571 1052.0645 638.7236 1048.4199 634.5522 C
1036.0371 620.3804 961.6982 621.6108 943.9805 621.9038 C
942.7979 621.9233 L
942.7979 621.9233 L
f
1 D
938.7451 619.1982 m
939.5537 620.7261 940.4258 622.3726 941.5225 624.1987 C
941.5244 624.1973 L
941.7305 624.541 942.0459 624.7603 942.3906 624.7539 C
944.1064 624.7261 L
961.6689 624.4355 1035.3525 623.2158 1047.1025 636.6636 C
1050.0859 640.0776 1049.8242 657.5107 1048.0205 679.9951 C
1045.2441 714.5908 1038.6719 760.6499 1034.5547 787.0674 C
1030.8604 810.7803 985.6836 808.3657 963.4248 807.1763 C
961.0986 807.0518 959.002 806.9395 957.666 806.8857 C
943.8926 806.3276 930.4316 805.6294 919.9551 803.1655 C
909.7891 800.7744 902.4912 796.7827 900.6328 789.7158 C
900.3799 788.7544 900.0586 787.5449 899.6797 786.1138 C
892.6807 759.7017 865.5537 657.3398 873.208 643.3086 C
880.6445 629.6763 900.3115 627.6343 914.8027 626.1304 C
918.2012 625.7778 921.3232 625.4536 923.9063 625.0264 C
923.9053 625.0254 L
924.0576 625.001 924.207 624.9302 924.3408 624.8096 C
924.8125 624.3872 924.9219 623.5137 924.585 622.8589 C
917.292 608.6431 908.5625 594.4941 903.5059 586.5703 C
907.2041 589.4673 912.9033 593.8799 920.9717 600.0005 C
933.6865 609.6465 935.7637 613.5703 938.7451 619.1982 C
f
*U
0 D
879.3389 659.5132 m
882.0967 686.7144 896.168 770.6431 916.5088 788.6665 c
932.6641 802.9819 997.0156 801.9897 1013.9639 796.2266 c
1036.0811 788.707 1042.7168 684.5894 1044.0293 646.9512 c
1044.6289 629.7593 1000.083 632.7749 958.71 634.1494 c
917.7852 635.5098 877.3438 639.8359 879.3389 659.5132 c
Bb
1 (GradientFill 1) 942.3262 532.1563 81 376.9872 1 0 0 1 0 0 Bg
58.9738 372.3459 171.3056 -27.1321 857.7148 545.5576 Xm
1317.4336 8317.9541 171.3056 -27.1321 -459.7188 -7772.3965 Bc
58.9738 372.3459 171.3056 -27.1321 857.7148 545.5576 Bm
1317.4336 8317.9541 171.3056 -27.1321 916.6885 917.9033 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
289.5166 495.542 m
358.2759 516.2578 L
289.6152 519.0513 L
289.1279 519.0732 288.7451 519.5425 288.6665 520.1572 C
288.665 520.1572 L
288.4263 522.0098 288.2612 523.6357 288.1187 525.0435 C
287.5205 530.9424 287.3521 532.5977 282.124 536.7598 C
276.8379 540.9678 251.8809 543.4741 220.9961 544.9233 C
167.3838 547.4395 96.0288 546.6709 78.209 546.165 C
71.1748 545.9648 65.2871 544.4956 60.6724 542.0562 C
55.9365 539.5532 52.5596 536.0425 50.6836 531.8569 C
48.6558 527.333 47.6406 517.894 47.3384 506.6611 C
46.9668 492.8604 47.6948 476.4629 48.9556 463.0527 C
49.7842 454.2344 50.9058 447.8086 55.6519 442.9961 C
60.5537 438.0244 69.3232 434.5586 85.4624 431.7139 C
113.0811 426.8457 155.3555 425.2754 192.8945 426.251 C
231.5259 427.2549 265.0508 430.9131 272.2236 436.4033 C
287.6377 448.2041 288.2227 475.0439 288.5557 490.3408 C
288.584 491.6533 288.6104 492.875 288.6504 494.1602 C
288.6729 494.834 289.043 495.4004 289.5171 495.541 C
289.5166 495.542 L
289.5166 495.542 L
f
366.7837 515.9521 m
290.7148 493.0342 L
290.6943 492.2266 290.6748 491.3223 290.6543 490.3799 C
290.3086 474.4863 289.7007 446.5996 273.1943 433.9639 C
265.7026 428.2285 231.7725 424.4355 192.8335 423.4238 C
155.2104 422.4463 112.8218 424.0234 85.0991 428.9102 C
68.5825 431.8213 59.5283 435.4482 54.3418 440.709 C
48.9995 446.126 47.7646 453.0732 46.8721 462.5693 C
45.5991 476.1064 44.8652 492.6738 45.2407 506.6338 C
45.5552 518.3101 46.6621 528.2363 48.8989 533.2271 C
51.0293 537.9805 54.7788 541.9224 59.9863 544.6743 C
64.8418 547.2402 70.9829 548.7852 78.27 548.9922 C
96.0781 549.498 167.4351 550.2637 221.1719 547.7417 C
252.3486 546.2783 277.6357 543.6743 283.249 539.2056 C
289.2988 534.3892 289.4956 532.4521 290.1958 525.5503 C
290.3052 524.4707 290.4287 523.2559 290.5996 521.8369 C
366.603 518.7446 L
367.104 518.7764 367.5479 518.3213 367.6372 517.6406 C
367.7373 516.8789 367.355 516.1226 366.7837 515.9521 C
f
*U
88.1602 540.8477 m
59.6011 542.6001 59.3506 532.4707 57.5913 502.9302 c
55.8325 473.3896 51.6787 442.5313 85.7407 438.1182 c
139.7783 431.1172 226.1055 429.2676 268.7422 448.2861 c
287.0298 456.4434 283.73 521.0039 277.0703 526.4438 c
262.9673 537.9644 116.7192 539.0947 88.1602 540.8477 c
Bb
1 (GradientFill 1) 167.2515 363.1982 89 223.3342 1 0 0 1 0 0 Bg
3.89771 223.3002 239.036 -4.17238 48.3296 365.2744 Xm
133.9586 7674.4961 239.036 -4.17238 -85.6289 -7309.2217 Bc
3.89771 223.3002 239.036 -4.17238 48.3296 365.2744 Bm
133.9586 7674.4961 239.036 -4.17238 52.2275 588.5747 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
248.0107 342.1396 m
339.1807 379.6113 L
246.5098 365.4365 L
245.9312 365.3486 245.4312 365.9072 245.3936 366.6826 C
245.3911 366.7773 L
245.1338 372.541 243.043 376.335 238.6797 378.9043 C
234.0337 381.6387 226.8818 383.043 216.7661 383.9229 C
198.4111 385.5195 166.2432 387.2256 137.1992 388.2129 C
111.7485 389.0781 88.7031 389.3896 79.5 388.5898 C
73.542 388.0723 67.8599 386.0078 63.3413 382.6494 C
59.1812 379.5566 56.0215 375.3779 54.585 370.3232 C
52.9053 364.4141 52.0664 352.1924 51.8184 337.6807 C
51.5161 319.957 52.1069 298.9316 53.1309 281.7588 C
53.813 270.3096 54.7368 261.9678 58.647 255.7139 C
62.5874 249.4121 69.6479 245.0166 82.6494 241.4023 C
105.0107 235.1875 139.2573 233.1836 169.6743 234.4297 C
200.9111 235.71 227.9907 240.3398 233.7373 247.2773 C
246.1812 262.2988 246.7866 312.0723 247.0625 334.7725 C
247.0889 336.9639 247.1128 338.8955 247.1484 340.7373 C
247.1631 341.418 247.5322 341.9941 248.0107 342.1396 C
248.0107 342.1396 L
f
350.5654 381.3799 m
249.2295 339.7305 L
249.2075 338.3691 249.187 336.6963 249.1646 334.8555 C
248.8838 311.7578 248.2676 261.1143 235.0991 245.2188 C
228.9521 237.7969 201.3193 232.8994 169.6377 231.6006 C
139.0913 230.3486 104.6665 232.3711 82.1401 238.6318 C
68.6538 242.3799 61.2573 247.0557 57.0151 253.8398 C
52.7427 260.6729 51.7549 269.4336 51.041 281.4082 C
50.0098 298.7002 49.4146 319.8389 49.7178 337.6201 C
49.9707 352.4082 50.8525 364.957 52.6318 371.2168 C
54.2705 376.9814 57.79 381.6865 62.396 385.1104 C
67.1982 388.6797 73.1992 390.8691 79.4624 391.4141 C
88.6831 392.2148 111.8066 391.9014 137.3506 391.0332 C
166.4023 390.0459 198.5986 388.3379 216.9907 386.7383 C
227.3452 385.8369 234.71 384.374 239.5942 381.499 C
244.3823 378.6797 246.8418 374.5557 247.395 368.4023 C
350.2344 384.1318 L
350.2349 384.1289 L
350.7275 384.2031 351.1895 383.8018 351.3174 383.1436 C
351.4619 382.3994 351.1255 381.6094 350.5654 381.3799 C
f
*U
100.4507 382.8936 m
76.9087 380.9785 58.7441 370.6787 57.2969 332.8965 c
55.8496 295.1143 62.334 254.4805 90.1382 248.709 c
132.1025 239.9971 191.4819 233.5625 226.5645 257.8867 c
241.6113 268.3193 241.3359 361.6182 236.7744 369.0205 c
227.4087 384.2197 130.1045 385.3047 100.4507 382.8936 c
Bb
1 (GradientFill 1) 145.6313 174.6758 89 272.1804 1 0 0 1 0 0 Bg
4.7502 272.1389 190.1721 -3.31946 51.7754 176.3145 Xm
133.7106 7660.2866 190.1721 -3.31946 -81.9351 -7483.9727 Bc
4.7502 272.1389 190.1721 -3.31946 51.7754 176.3145 Bm
133.7106 7660.2866 190.1721 -3.31946 56.5254 448.4531 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
210.354 175.5586 m
278.542 222.8242 L
199.7627 192.9727 L
199.4404 192.8496 199.1172 192.9395 198.875 193.1797 C
192.4683 199.5615 173.8818 203.6367 152.3472 206.0957 C
118.6294 209.9453 77.833 209.7627 64.8228 208.3066 C
59.9111 207.7578 55.2241 205.5654 51.4946 201.998 C
48.0337 198.6875 45.3989 194.1836 44.1895 188.707 C
42.7764 182.3096 42.0708 169.1338 41.8633 153.5029 C
41.6108 134.4502 42.1045 111.8447 42.96 93.376 C
43.5332 81.0059 44.3091 71.9912 47.5942 65.2305 C
50.8701 58.4893 56.7349 53.7881 67.5303 49.9268 C
86.1694 43.2598 114.7241 41.1113 140.0908 42.4492 C
166.0923 43.8203 188.6196 48.7588 193.3774 56.1494 C
198.3477 63.8711 202.3828 82.2012 205.2363 102.6133 C
208.9634 129.2695 210.6333 159.3193 209.7554 174.1328 C
209.7207 174.7324 209.9717 175.29 210.355 175.5566 C
210.354 175.5586 L
210.354 175.5586 L
f
288.5591 226.6484 m
211.8975 173.5098 L
212.6636 158.1729 210.9785 128.5186 207.3018 102.2207 C
204.3872 81.3721 200.1953 62.5391 194.9331 54.3643 C
189.7598 46.3281 166.604 41.0283 140.0708 39.6299 C
114.5337 38.2832 85.7505 40.459 66.9097 47.1982 C
55.5889 51.2471 49.3823 56.293 45.8262 63.6123 C
42.2788 70.9111 41.4585 80.2734 40.8662 93.0703 C
40.0059 111.6348 39.5088 134.333 39.7622 153.4307 C
39.9727 169.2813 40.7046 182.7178 42.1797 189.3945 C
43.5376 195.543 46.4795 200.584 50.3384 204.2754 C
54.3911 208.1514 59.459 210.5303 64.752 211.1221 C
77.8198 212.585 118.7778 212.7705 152.6123 208.9072 C
174.0522 206.459 192.6899 202.3555 199.7607 195.8672 C
287.8076 229.2305 L
288.2993 229.4629 288.8389 229.1875 289.0635 228.5586 C
289.3101 227.8682 289.084 227.0127 288.5591 226.6484 C
f
*U
70.0698 202.9648 m
50.4131 200.9082 47.4727 188.9531 46.2642 148.3574 c
45.0557 107.7617 46.5073 65.7793 69.8091 59.2891 c
109.7383 48.1689 161.1084 43.6279 190.4009 69.7627 c
202.9644 80.9717 210.21 172.7168 196.123 187.1709 c
183.7456 199.8701 94.8301 205.5557 70.0698 202.9648 c
Bb
1 (GradientFill 1) 124.8931 -15.833 90 293.7325 1 0 0 1 0 0 Bg
-0.000013 293.7325 169.1543 0.000007 43.0557 -15.833 Xm
-0.000334 7640.9326 169.1543 0.000007 43.0562 -7656.7656 Bc
-0.000013 293.7325 169.1543 0.000007 43.0557 -15.833 Bm
-0.000334 7640.9326 169.1543 0.000007 43.0557 277.8994 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
391.7061 313.7148 m
436.3057 348.8984 L
384.937 330.8682 L
384.6323 330.7607 384.3306 330.8418 384.0977 331.0566 C
384.0967 331.0547 L
379.9116 334.916 367.6826 337.3916 353.5005 338.8916 C
331.2344 341.2471 304.2969 341.1348 295.708 340.2451 C
292.5161 339.915 289.4736 338.5977 287.0566 336.457 C
284.8452 334.4971 283.1641 331.8447 282.3984 328.6318 C
281.479 324.7773 281.019 316.7705 280.8833 307.2549 C
280.7168 295.6123 281.0425 281.792 281.6074 270.499 C
281.981 263.0254 282.4834 257.5869 284.5962 253.5586 C
286.71 249.5293 290.5283 246.708 297.5786 244.3721 C
309.8701 240.2998 328.71 238.9873 345.4487 239.8047 C
362.5522 240.6396 377.3438 243.6104 380.4214 248.0391 C
383.7402 252.8154 386.4253 262.9131 388.2993 274.0527 C
390.646 288.0039 391.6895 303.4678 391.125 312.292 C
391.0874 312.8857 391.3301 313.4424 391.7061 313.7148 C
391.7061 313.7148 L
f
443.7622 351.5742 m
393.2686 311.7412 L
393.7256 302.542 392.6597 287.2998 390.3486 273.5615 C
388.3984 261.9688 385.5396 251.3672 381.9204 246.1582 C
378.4355 241.1436 363.0361 237.8467 345.4209 236.9863 C
328.52 236.1602 309.4663 237.4961 296.9893 241.6299 C
289.4243 244.1357 285.2646 247.2822 282.8633 251.8594 C
280.4614 256.4385 279.9087 262.249 279.5117 270.1826 C
278.9429 281.5586 278.6147 295.4717 278.7822 307.1836 C
278.9219 316.9395 279.4121 325.2256 280.4014 329.374 C
281.332 333.2783 283.3374 336.4688 285.9629 338.7949 C
288.6885 341.21 292.0933 342.6924 295.645 343.0605 C
304.29 343.9561 331.3823 344.0703 353.7583 341.7031 C
367.853 340.2129 380.1333 337.7119 384.9429 333.7568 C
443.0444 354.1504 L
443.0444 354.1504 L
443.4883 354.3057 443.96 354.0625 444.1865 353.5127 C
444.4619 352.8447 444.272 351.9766 443.7622 351.5742 C
f
*U
301.0767 335.0703 m
288.7705 333.8779 286.9297 326.9453 286.1729 303.4033 c
285.4165 279.8613 286.3252 255.5156 300.9131 251.752 c
325.9106 245.3027 358.0703 242.6699 376.4087 257.8262 c
384.2734 264.3262 388.8096 317.5303 379.9907 325.9121 c
372.2422 333.2764 316.5776 336.5732 301.0767 335.0703 c
Bb
1 (GradientFill 1) 322.3008 207.2881 82 163.4474 1 0 0 1 0 0 Bg
22.7475 161.8567 108.0494 -15.1854 269.1426 214.7588 Xm
1093.8524 7783.1636 108.0494 -15.1854 -824.71 -7568.4053 Bc
22.7475 161.8567 108.0494 -15.1854 269.1426 214.7588 Bm
1093.8524 7783.1636 108.0494 -15.1854 291.8901 376.6152 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
360.1138 153.1895 m
406.4932 195.8135 L
353.9658 175.9102 L
353.6431 175.7871 353.3203 175.877 353.0781 176.1172 C
348.9004 180.2783 336.6797 182.9473 322.5044 184.5654 C
300.2417 187.1074 273.3076 186.9873 264.7197 186.0264 C
261.5381 185.6709 258.5054 184.2539 256.0957 181.9492 C
253.876 179.8262 252.1865 176.9395 251.4126 173.4346 C
250.5103 169.3496 250.0474 154.6758 249.8984 137.6377 C
249.7085 115.9785 250.0371 90.5654 250.6143 78.1025 C
250.9897 70 251.4951 64.1016 253.6216 59.7246 C
255.7388 55.3672 259.5566 52.3193 266.6021 49.7988 C
278.8857 45.4063 297.7178 43.9902 314.4531 44.873 C
331.5459 45.7744 346.3271 48.9766 349.4009 53.752 C
352.4478 58.4854 354.8955 72.9951 356.6563 89.6279 C
359.1899 113.5586 360.2373 141.6758 359.6333 151.8604 C
359.6025 152.3955 359.7998 152.8975 360.1143 153.1885 C
360.1138 153.1895 L
360.1138 153.1895 L
f
412.8359 198.2979 m
361.7676 151.3643 L
362.2793 140.4023 361.2178 112.8506 358.7319 89.3691 C
356.9199 72.25 354.3193 57.1904 350.9561 51.9668 C
347.4673 46.5459 332.0581 42.9824 314.4331 42.0537 C
297.5273 41.1621 278.4668 42.6055 265.9814 47.0703 C
258.4106 49.7783 254.2515 53.1719 251.8535 58.1064 C
249.4648 63.0215 248.915 69.2676 248.52 77.7969 C
247.9419 90.2842 247.6128 115.7861 247.8037 137.543 C
247.9546 154.8154 248.4419 169.7705 249.4023 174.1221 C
250.3252 178.2988 252.3218 181.7217 254.9395 184.2256 C
257.6724 186.8398 261.0864 188.4434 264.6489 188.8418 C
273.2944 189.8096 300.3901 189.9326 322.77 187.377 C
336.8545 185.7686 349.1299 183.0713 353.959 178.8027 C
411.9785 200.7881 L
412.4141 200.9863 412.8994 200.791 413.1558 200.2666 C
413.4678 199.6289 413.3247 198.7471 412.8359 198.2979 C
f
*U
270.084 180.3398 m
257.7783 179.0869 255.9375 171.8086 255.1807 147.0928 c
254.4243 122.377 252.8428 67.2236 265.9209 59.7998 c
280.418 51.5713 327.0786 46.375 345.4165 62.2871 c
353.2813 69.1104 357.8169 161.9238 348.9985 170.7236 c
341.25 178.4551 285.585 181.917 270.084 180.3398 c
Bb
1 (GradientFill 1) 283.1899 -21.4033 82 246.7264 1 0 0 1 0 0 Bg
34.3377 244.3253 113.5731 -15.9617 227.8569 -13.627 Xm
1083.7146 7711.0303 113.5731 -15.9617 -855.8579 -7724.6582 Bc
34.3377 244.3253 113.5731 -15.9617 227.8569 -13.627 Bm
1083.7146 7711.0303 113.5731 -15.9617 262.1948 230.6982 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
1068.75 342.7422 m
1068.499 342.8291 L
1050.6748 349.0156 1034.874 354.501 1026.168 377.8301 C
1025.9141 378.5117 1026.1289 379.3691 1026.6475 379.7422 C
1026.9971 379.9941 1027.3945 379.9629 1027.6953 379.708 C
1027.6973 379.7119 L
1027.75 379.667 1045.6494 364.3574 1068.3145 361.7842 C
1068.4795 362.9316 1068.6162 364.0391 1068.749 365.1084 C
1070.4395 378.7861 1071.417 386.6895 1111.0684 388.3174 C
1169.3125 390.709 L
1176.6934 391.0117 1182.9551 389.8184 1187.96 387.6826 C
1193.6943 385.2354 1197.8115 381.5293 1200.1123 377.3838 C
1203.0645 372.0664 1205.4248 360.835 1207.0156 348.8643 C
1209.0098 333.8701 1209.8164 317.585 1209.0654 310.4189 C
1206.5664 286.584 1152.667 287.2686 1118.1807 287.707 C
1114.165 287.7578 1110.417 287.8057 1106.9893 287.8115 C
1072.7373 287.8672 1068.0049 307.4209 1068.0332 324.8926 C
1068.0391 328.4336 1068.248 331.8906 1068.4404 335.0684 C
1068.6123 337.9141 1068.7705 340.5322 1068.75 342.7422 C
1068.75 342.7422 L
f
1 D
1069.1045 345.5703 m
1070.0762 345.2324 L
1070.0762 345.2305 L
1070.4883 345.0889 1070.7969 344.6074 1070.8193 343.998 C
1070.918 341.4141 1070.7324 338.3457 1070.5273 334.9639 C
1070.3398 331.8564 1070.1348 328.4766 1070.1299 325.0088 C
1070.1035 308.8145 1074.5938 290.6885 1107.0908 290.6357 C
1110.4346 290.6299 1114.2324 290.5811 1118.2988 290.5303 C
1152.0352 290.1006 1204.7617 289.4307 1206.9902 310.6787 C
1207.7139 317.5859 1206.9082 333.4941 1204.9463 348.2471 C
1203.4033 359.8574 1201.1582 370.6729 1198.4082 375.627 C
1196.3408 379.3496 1192.5635 382.7129 1187.2432 384.9834 C
1182.4453 387.0313 1176.416 388.1729 1169.2754 387.8799 C
1111.0313 385.4883 L
1073.1875 383.9346 1072.3203 376.9209 1070.8193 364.7822 C
1070.6328 363.2744 1070.4375 361.6924 1070.1738 360.042 C
1070.1719 360.043 L
1070.0596 359.335 1069.5674 358.8193 1069.0273 358.8701 C
1051.3662 360.583 1036.3994 369.998 1029.9355 374.6709 C
1038.5605 356.1758 1052.9824 351.166 1069.1045 345.5703 C
f
*U
0 D
1159.5713 379.8193 m
1189.9912 381.3105 1190.2578 372.6943 1192.1318 347.5693 c
1194.0059 322.4443 1209.9346 307.0693 1173.8604 302.1943 c
1105.0879 292.9004 1084.8389 282.4629 1079.0488 334.0742 c
1077.1523 350.9785 1078.2383 364.5645 1083.9072 371.3184 c
1094.7148 384.1934 1129.1504 378.3291 1159.5713 379.8193 c
Bb
1 (GradientFill 1) 1132.9248 242.5098 87 180.3428 1 0 0 1 0 0 Bg
9.43842 180.0956 138.7079 -7.26938 1069.6387 245.8262 Xm
453.8075 8659.1592 138.7079 -7.26938 615.8311 -8413.334 Bc
9.43842 180.0956 138.7079 -7.26938 1069.6387 245.8262 Bm
453.8075 8659.1592 138.7079 -7.26938 1079.0771 425.9219 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
948.0859 485.1279 m
947.9297 485.1914 L
947.8906 485.209 L
932.6641 491.4033 919.167 496.9141 911.7354 520.2529 C
911.5127 520.9565 911.7656 521.7979 912.2988 522.1304 C
912.6611 522.3564 913.0605 522.29 913.3486 522.0044 C
913.3496 522.0054 L
913.3936 521.9609 928.5264 506.791 947.7119 504.1553 C
947.8594 505.3608 947.9756 506.4878 948.0889 507.5801 C
948.8301 514.7524 949.4326 520.5625 954.9307 524.7051 C
960 528.5244 982.75 530.7461 1010.79 531.9917 C
1059.0586 534.1353 1123.207 533.4834 1139.2197 533.0527 C
1145.7773 532.8765 1151.2939 531.5659 1155.6475 529.3882 C
1160.3223 527.0498 1163.6914 523.6963 1165.6074 519.6504 C
1167.6289 515.3828 1168.6289 506.9102 1168.9121 496.9492 C
1169.25 485.0723 1168.5879 470.9629 1167.4414 459.4258 C
1166.6299 451.251 1165.5029 445.2666 1160.6191 440.5801 C
1155.9336 436.082 1147.7734 432.9844 1132.9023 430.5029 C
1107.9834 426.3467 1069.8809 425.0049 1036.0615 425.8359 C
1001.0645 426.6973 970.5732 429.9199 963.8467 434.793 C
949.001 445.5488 948.4531 469.3203 948.1426 482.8682 C
948.125 483.6299 948.1074 484.3574 948.0859 485.1279 C
948.0859 485.1279 L
f
1 D
948.623 487.9033 m
949.4531 487.5654 L
949.4531 487.5654 L
949.8467 487.4043 950.1367 486.9287 950.1553 486.334 C
950.1826 485.5 950.209 484.334 950.2383 483.085 C
950.5361 470.1045 951.0605 447.3281 964.9023 437.2998 C
971.3555 432.625 1001.4873 429.5107 1036.2041 428.6572 C
1069.9355 427.8281 1107.9209 429.1631 1132.7393 433.3027 C
1147.2168 435.7178 1155.0742 438.6523 1159.4551 442.8574 C
1163.6377 446.8721 1164.6289 452.2617 1165.3643 459.6631 C
1166.4951 471.0459 1167.1475 484.9746 1166.8145 496.71 C
1166.543 506.2329 1165.6357 514.231 1163.8242 518.0552 C
1162.1396 521.6123 1159.1035 524.5981 1154.8428 526.7295 C
1150.6846 528.8091 1145.3906 530.0615 1139.0771 530.2314 C
1123.0703 530.6621 1058.9619 531.3145 1010.7539 529.1733 C
983.0176 527.9414 960.6113 525.8164 955.8848 522.2554 C
951.3564 518.8447 950.8223 513.6865 950.1641 507.3203 C
949.999 505.7217 949.8262 504.0522 949.6055 502.4336 C
949.6025 502.4341 L
949.5039 501.6968 948.9941 501.1582 948.4395 501.2183 C
933.6553 502.8994 921.0811 511.9648 915.3584 516.7471 C
922.709 498.4614 934.9277 493.4736 948.584 487.9189 C
948.623 487.9033 L
f
*U
0 D
1132.7588 525.917 m
1158.7969 527.4077 1159.0254 518.7925 1160.6289 493.667 c
1162.2334 468.542 1166.0195 442.2949 1134.9648 438.542 c
1085.6973 432.5879 1006.9902 431.0146 968.1172 447.1904 c
951.4434 454.1279 954.4521 509.0396 960.5234 513.6665 c
973.3818 523.4648 1106.7207 524.4268 1132.7588 525.917 c
Bb
1 (GradientFill 1) 1061.999 384.8008 92 195.7036 1 0 0 1 0 0 Bg
-6.82997 195.5844 217.8997 7.60924 951.9971 380.959 Xm
-299.8073 8585.335 217.8997 7.60924 1251.8047 -8204.377 Bc
-6.82997 195.5844 217.8997 7.60924 951.9971 380.959 Bm
-299.8073 8585.335 217.8997 7.60924 945.167 576.5435 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
723.1172 194.5518 m
722.9736 194.6221 L
708.6582 201.5928 695.9678 207.7725 689.0039 233.9463 C
688.8125 234.6699 689.0996 235.4932 689.6465 235.7852 C
690.0264 235.9883 690.4326 235.8809 690.709 235.5527 C
690.709 235.5537 L
690.751 235.5039 704.8652 218.5703 722.7607 215.5674 C
722.9014 216.9404 723.0146 218.251 723.124 219.5186 C
723.8135 227.498 724.3721 233.9619 729.501 238.5869 C
734.2861 242.9023 755.665 245.4072 782.0059 246.8076 C
827.2842 249.2148 887.4785 248.4814 902.5059 247.9971 C
908.6855 247.7988 913.8867 246.3193 917.9922 243.8613 C
922.3887 241.2295 925.5518 237.4658 927.3457 232.9326 C
929.1631 228.3398 930.0898 205.5615 930.3877 179.3789 C
930.7705 145.665 930.1445 106.1094 929.04 92.79 C
928.2852 83.6963 927.2363 77.0381 922.6855 71.8096 C
918.2676 66.7344 910.5879 63.2402 896.6006 60.4473 C
873.2139 55.7783 837.4531 54.2715 805.7129 55.2061 C
772.8496 56.1729 744.208 59.8047 737.8711 65.2988 C
724.415 76.9678 723.5098 159.8447 723.2031 187.8643 C
723.1719 190.7314 723.1465 193.0273 723.1172 194.5518 C
723.1172 194.5518 L
f
1 D
723.7617 197.2822 m
724.4883 196.9277 L
724.8867 196.7676 725.1787 196.2861 725.1934 195.6865 C
725.2383 194.0498 725.2666 191.46 725.3037 188.0361 C
725.6055 160.3828 726.5 78.5918 739.0664 67.6943 C
745.0947 62.4678 773.3252 58.9844 805.8643 58.0264 C
837.4941 57.0947 873.1152 58.5938 896.3877 63.2402 C
909.9336 65.9443 917.2813 69.2256 921.3682 73.9209 C
925.3232 78.4639 926.2617 84.5771 926.958 92.9727 C
928.0527 106.1621 928.6689 145.5547 928.2871 179.207 C
927.9941 205.0303 927.1338 227.3584 925.4863 231.5215 C
923.9023 235.5244 921.0566 238.8799 917.0693 241.2666 C
913.1904 243.5889 908.25 244.9873 902.3545 245.1768 C
887.3438 245.6602 827.2158 246.3926 781.9863 243.9883 C
756.002 242.6064 735.0186 240.2305 730.6123 236.2588 C
726.335 232.4004 725.8281 226.5488 725.2051 219.3252 C
725.0518 217.5586 724.8926 215.7129 724.6816 213.8574 C
724.6807 213.8574 L
724.5947 213.085 724.0625 212.5225 723.4912 212.5996 C
709.667 214.4805 697.9063 224.5645 692.4824 229.9697 C
699.3848 209.1563 710.8945 203.5479 723.7617 197.2822 C
f
*U
0 D
890.2676 240.0283 m
914.4893 239.5615 921.9277 222.5703 922.3008 164.4814 c
922.6748 106.3926 920.4102 74.2949 891.1982 69.6719 c
840.1338 61.5918 761.8613 58.1904 743.3027 76.5615 c
728.8008 90.916 729.9375 216.5576 735.5479 225.459 c
747.4287 244.3096 863.9912 240.5352 890.2676 240.0283 c
Bb
1 (GradientFill 1) 827.0039 12.5254 90 292.549 1 0 0 1 0 0 Bg
-0.000013 292.549 197.874 0.000009 726.8008 12.5254 Xm
-0.000365 8356.8389 197.874 0.000009 726.8008 -8344.3145 Bc
-0.000013 292.549 197.874 0.000009 726.8008 12.5254 Bm
-0.000365 8356.8389 197.874 0.000009 726.8008 305.0742 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
715.4746 457.7461 m
715.3291 457.8174 L
701.0137 464.7881 688.3232 470.9678 681.3594 497.1416 C
681.168 497.8647 681.4551 498.688 682.002 498.98 C
682.3818 499.1836 682.7881 499.0762 683.0645 498.748 C
683.0645 498.7485 L
683.1064 498.6987 697.2207 481.7656 715.1162 478.7627 C
715.2568 480.1357 715.3701 481.4463 715.4795 482.7139 C
716.1689 490.6934 716.7275 497.1572 721.8574 501.7827 C
726.79 506.2305 741.1641 508.7607 758.417 510.1396 C
786.4697 512.3828 822.3613 511.6675 837.1113 511.1924 C
843.29 510.9941 848.4922 509.5142 852.5977 507.0562 C
856.9941 504.4243 860.1572 500.6611 861.9512 496.1279 C
863.8018 491.4502 865.0273 462.6953 865.6357 430.1748 C
866.3896 389.8477 866.2305 343.5664 865.1445 330.4854 C
864.3906 321.3916 863.3418 314.7334 858.79 309.5049 C
854.3721 304.4287 846.6924 300.9355 832.7051 298.1426 C
809.8535 293.5811 788.5449 292.0371 771.2148 292.8408 C
752.3877 293.7148 738.1924 297.3867 731.7266 302.9941 C
717.9551 314.9365 716.0859 422.874 715.5732 452.4561 C
715.5352 454.6719 715.5049 456.4287 715.4746 457.7461 C
715.4746 457.7461 L
f
1 D
716.1172 460.4775 m
716.8438 460.123 L
717.2422 459.9629 717.5342 459.4814 717.5488 458.8818 C
717.5781 457.8008 717.6162 455.6045 717.668 452.6504 C
718.1748 423.3789 720.0244 316.5742 732.9219 305.3896 C
739.0967 300.0361 752.9238 296.5166 771.3906 295.6592 C
788.5908 294.8613 809.7627 296.3975 832.4932 300.9355 C
846.0381 303.6396 853.3857 306.9199 857.4736 311.6162 C
861.4287 316.1592 862.3672 322.2725 863.0635 330.668 C
864.1396 343.6396 864.2939 389.751 863.542 429.9805 C
862.9404 462.1436 861.7822 490.4443 860.0918 494.7168 C
858.5078 498.7197 855.6621 502.0752 851.6748 504.4619 C
847.7959 506.7837 842.8555 508.1826 836.96 508.3721 C
822.2529 508.8457 786.4609 509.5581 758.4385 507.3179 C
741.5293 505.9658 727.5322 503.5693 722.9678 499.4536 C
718.6904 495.5957 718.1836 489.7441 717.5605 482.5205 C
717.4072 480.7529 717.248 478.9082 717.0371 477.0527 C
717.0371 477.0527 L
716.9502 476.2803 716.418 475.7178 715.8467 475.7949 C
702.0225 477.6758 690.2617 487.7598 684.8379 493.165 C
691.7402 472.3516 703.25 466.7432 716.1172 460.4775 C
f
*U
0 D
753.9893 301.5156 m
737.1904 305.4668 724.3184 322.5029 724.0518 388.5889 c
723.7861 454.6748 719.0234 491.5664 739.8262 496.8252 c
776.1934 506.0186 838.3105 509.5122 851.5273 488.6123 c
861.8545 472.2813 860.0928 336.4189 857.0498 325.9668 c
850.4102 303.1563 780.1309 295.3682 753.9893 301.5156 c
Bb
1 (GradientFill 1) 783.5879 257.707 87 288.5437 1 0 0 1 0 0 Bg
15.1012 288.1483 152.7861 -8.00718 704.9805 261.8271 Xm
435.5221 8310.2549 152.7861 -8.00718 269.4585 -8048.4277 Bc
15.1012 288.1483 152.7861 -8.00718 704.9805 261.8271 Bm
435.5221 8310.2549 152.7861 -8.00718 720.082 549.9756 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
1006.7676 210.5557 m
1006.6055 210.6348 L
992.2891 217.6055 979.5986 223.7852 972.6348 249.959 C
972.4434 250.6826 972.7314 251.5059 973.2773 251.7979 C
973.6582 252.001 974.0645 251.8936 974.3398 251.5654 C
974.3408 251.5664 L
974.3818 251.5156 988.4961 234.583 1006.3926 231.5801 C
1006.5322 232.9531 1006.6455 234.2637 1006.7549 235.5313 C
1007.4443 243.5107 1008.0039 249.9746 1013.1328 254.5996 C
1018.0225 259.0088 1033.8643 261.5322 1053.0117 262.918 C
1084.6523 265.208 1125.5557 264.4873 1140.3867 264.0098 C
1146.5664 263.8115 1151.7676 262.332 1155.873 259.873 C
1160.2695 257.2412 1163.4326 253.4785 1165.2266 248.9453 C
1167.4443 243.3408 1165.7686 203.3125 1162.3613 163.3047 C
1159.4082 128.6299 1155.1748 93.832 1151.084 81.377 C
1148.2646 72.793 1145.6855 66.5928 1140.1914 61.7656 C
1134.7988 57.0273 1126.6602 53.7412 1112.7314 50.96 C
1088.9521 46.2129 1073.6045 44.7354 1062.6533 45.7695 C
1051.5703 46.8154 1044.9688 50.4209 1038.7529 55.8115 C
1033.123 60.6934 1027.3408 81.3428 1022.2715 106.1641 C
1013.9307 147 1007.3721 199.4268 1006.7676 210.5557 C
1006.7676 210.5557 L
f
1 D
1007.3926 213.2949 m
1008.1201 212.9404 L
1008.5176 212.7803 1008.8096 212.2988 1008.8252 211.6992 C
1009.0605 203.002 1015.7324 148.9443 1024.2939 107.0303 C
1029.25 82.7676 1034.7871 62.6826 1039.9482 58.207 C
1045.9023 53.043 1052.2363 49.5889 1062.8945 48.582 C
1073.6855 47.5635 1088.8906 49.0361 1112.5186 53.7529 C
1126.1211 56.4688 1133.9971 59.6152 1139.1055 64.1035 C
1144.1113 68.502 1146.5186 74.3232 1149.1748 82.4121 C
1153.1709 94.5791 1157.3467 129.0518 1160.2793 163.4873 C
1163.6494 203.0508 1165.4063 242.3828 1163.3672 247.5342 C
1161.7832 251.5371 1158.9375 254.8926 1154.9502 257.2793 C
1151.0713 259.6016 1146.1309 261 1140.2354 261.1895 C
1125.4414 261.666 1084.6309 262.3838 1053.0254 260.0967 C
1034.2227 258.7354 1018.7617 256.3447 1014.2441 252.2715 C
1009.9658 248.4141 1009.46 242.5615 1008.8359 235.3379 C
1008.6836 233.5703 1008.5234 231.7256 1008.3125 229.8701 C
1008.3125 229.8701 L
1008.2256 229.0977 1007.6934 228.5352 1007.123 228.6123 C
993.2988 230.4932 981.5381 240.5771 976.1143 245.9824 C
983.0166 225.1689 994.5254 219.5605 1007.3926 213.2949 C
f
*U
0 D
1063.6406 56.209 m
1026.1895 65.0146 1006.0801 244.2656 1027.3525 249.6426 c
1063.7178 258.8359 1140.0879 264.5791 1153.3027 243.6797 c
1163.6299 227.3486 1146.4932 95.2363 1143.4512 84.7842 c
1136.8125 61.9746 1089.7803 50.0615 1063.6406 56.209 c
Bb
1 (GradientFill 1) 1060.7871 8.4248 82 396.272 1 0 0 1 0 0 Bg
55.1504 392.4155 162.1935 -22.7948 972.6553 20.8105 Xm
1195.639 8507.4131 162.1935 -22.7948 -222.9839 -8486.6016 Bc
55.1504 392.4155 162.1935 -22.7948 972.6553 20.8105 Bm
1195.639 8507.4131 162.1935 -22.7948 1027.8057 413.2266 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
912.2939 336.8184 m
912.21 336.8574 L
898.624 343.0703 886.5801 348.5791 879.9609 371.9502 C
879.7568 372.668 880.0332 373.5 880.5762 373.8076 C
880.9824 374.0381 881.4248 373.9092 881.7061 373.5283 C
882.7725 372.3545 895.7188 358.4092 911.9756 355.8291 C
912.0986 356.96 912.1982 358.0244 912.2949 359.0527 C
913.5801 372.7549 914.3232 380.6709 944.6631 382.3125 C
988.8682 384.7041 L
994.541 385.0107 999.3516 383.8037 1003.1953 381.6426 C
1007.6016 379.165 1010.7607 375.4229 1012.5215 371.2451 C
1014.751 365.9531 1016.5361 354.752 1017.7412 342.8096 C
1019.251 327.8389 1019.8643 311.5996 1019.2969 304.4688 C
1017.3965 280.5801 976.3252 281.2676 950.0469 281.707 C
947.0088 281.7578 944.1729 281.8057 941.5586 281.8115 C
915.2949 281.8682 911.7158 301.5049 911.7529 319.0029 C
911.7607 322.5039 911.917 325.9082 912.0605 329.041 C
912.1934 331.9199 912.3145 334.5654 912.2939 336.8184 C
912.2939 336.8184 L
f
1 D
912.9678 339.542 m
913.7051 339.2041 L
913.7051 339.2021 L
914.084 339.0293 914.3594 338.5605 914.375 337.9814 C
914.4492 335.4395 914.3076 332.3721 914.1523 328.9912 C
914.0107 325.9043 913.8564 322.5498 913.8496 319.1191 C
913.8145 302.8955 917.1553 284.6875 941.6611 284.6357 C
944.1855 284.6299 947.0771 284.5811 950.1738 284.5293 C
975.6729 284.1025 1015.5273 283.4355 1017.2139 304.6289 C
1017.7666 311.5723 1017.1543 327.5254 1015.6641 342.3027 C
1014.4902 353.9404 1012.7793 364.7871 1010.6816 369.7656 C
1009.127 373.4551 1006.2939 376.7832 1002.3115 379.0234 C
998.7148 381.0459 994.1963 382.1738 988.8486 381.8848 C
944.6426 379.4932 L
916.167 377.9521 915.5098 370.9531 914.374 358.8379 C
914.2305 357.3096 914.0801 355.7061 913.8867 354.1133 C
913.8857 354.1133 L
913.7949 353.3545 913.2715 352.8008 912.707 352.8711 C
899.7695 354.5254 888.7305 363.3027 883.498 368.1621 C
890.0439 350.0273 900.873 345.0732 912.9678 339.542 C
f
*U
0 D
981.4785 373.8193 m
1004.5664 375.3105 1004.7695 366.6943 1006.1914 341.5693 c
1007.6133 316.4443 1019.7021 301.0693 992.3242 296.1943 c
940.1289 286.9004 924.7598 276.4629 920.3662 328.0732 c
918.9268 344.9785 919.751 358.5645 924.0537 365.3184 c
932.2559 378.1934 958.3906 372.3291 981.4785 373.8193 c
Bb
1 (GradientFill 1) 971.0811 236.5371 94 185.532 1 0 0 1 0 0 Bg
-12.9421 185.0801 101.2198 7.07798 924.7314 233.2959 Xm
-593.1757 8482.8076 101.2198 7.07798 1517.9072 -8249.5117 Bc
-12.9421 185.0801 101.2198 7.07798 924.7314 233.2959 Bm
-593.1757 8482.8076 101.2198 7.07798 911.7891 418.376 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
639.5313 574.0342 m
643.5527 566.7637 648.96 558.4619 655.2383 551.0034 C
659.5049 545.9341 664.1689 541.2578 669.0645 537.5674 C
666.2832 545.5029 659.7949 563.8052 654.8203 576.1909 C
654.5508 576.8618 654.7461 577.7271 655.2568 578.123 C
655.3594 578.2021 655.4658 578.2563 655.5742 578.2876 C
668.9502 582.1763 679.4971 588.144 686.7783 596.5396 C
693.9619 604.8232 697.9707 615.5273 698.3809 628.998 C
698.3926 629.3638 698.3975 629.7222 698.3975 630.0723 C
698.3975 643.0254 691.3447 656.1606 679.7793 666.2417 C
668.0732 676.4448 651.79 683.4692 633.498 684.0264 C
632.748 684.0493 631.9648 684.061 631.1494 684.061 C
612.0283 684.061 594.5435 677.8169 581.7314 667.7222 C
569.0864 657.7588 561.0347 644.0649 560.5752 629.0029 C
560.5615 628.542 560.5542 628.0898 560.5542 627.6479 C
560.5542 613.2451 567.5762 600.1714 579.0811 590.5273 C
590.7344 580.7598 606.9473 574.5342 625.1484 573.979 C
626.001 573.9531 626.8877 573.9399 627.8076 573.9399 C
629.9424 573.9399 631.6582 573.9502 633.3027 574.0313 C
634.957 574.1128 636.6006 574.2686 638.6182 574.5596 C
638.9902 574.6118 639.3271 574.3979 639.5303 574.0332 C
639.5313 574.0342 L
639.5313 574.0342 L
f
653.8066 548.8481 m
647.5908 556.2324 642.2158 564.4243 638.1641 571.6709 C
636.373 571.4268 634.8389 571.2896 633.2754 571.2124 C
631.5381 571.127 629.8232 571.1162 627.7051 571.1162 C
626.8271 571.1162 625.9238 571.1309 624.9971 571.1587 C
606.4263 571.7246 589.8545 578.1011 577.9175 588.1069 C
565.833 598.2368 558.457 612.1104 558.457 627.5205 C
558.457 628.019 558.4648 628.5122 558.4795 628.998 C
558.9712 645.125 567.4399 659.6675 580.7344 670.1426 C
593.8628 680.4863 611.7393 686.8848 631.251 686.8848 C
632.0254 686.8848 632.8252 686.8716 633.6494 686.8467 C
652.335 686.2773 668.9873 679.0854 680.9736 668.6377 C
693.0996 658.0679 700.4951 644.1162 700.4951 630.1997 C
700.4951 629.7935 700.4893 629.3936 700.4766 629.0029 C
700.04 614.6724 695.7627 603.2695 688.0947 594.4282 C
680.7871 586.002 670.4043 579.9536 657.3398 575.9531 C
663.6602 559.9902 671.9473 536.0605 672.3184 534.9883 C
672.4639 534.6025 672.4688 534.1221 672.3027 533.6943 C
672.0283 532.9917 671.3926 532.6953 670.8828 533.0317 C
664.7813 537.0713 658.9971 542.6816 653.8066 548.8481 C
f
*U
621.6436 672.8154 m
658.835 674.0044 676.875 660.9248 v
694.916 647.8452 696.0264 615.146 684.0918 602.958 c
672.1572 590.77 632.7451 569.6641 601.105 586.0137 c
553.6689 610.5249 570.2778 669.8809 621.6436 672.8154 C
Bb
1 (GradientFill 1) 633.9297 544.6138 91 188.4621 1 0 0 1 0 0 Bg
-3.28913 188.4334 146.3941 2.55533 552.8438 543.1982 Xm
-142.8374 8183.1162 146.3941 2.55533 695.6807 -7639.918 Bc
-3.28913 188.4334 146.3941 2.55533 552.8438 543.1982 Bm
-142.8374 8183.1162 146.3941 2.55533 549.5547 731.6318 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
587.4502 73.3535 m
599.9082 74.3848 614.5161 74.3945 628.3271 73.6719 C
640.0703 73.0576 651.2266 71.9121 659.9854 70.415 C
652.3555 75.4355 641.4961 81.0293 630.3008 85.4951 C
618.415 90.2373 606.1802 93.6982 597.0845 93.832 C
596.5068 93.8428 596.0669 94.4834 596.1016 95.2627 C
596.1099 95.4492 596.1445 95.626 596.2007 95.7881 C
596.1992 95.7881 L
598.186 101.5078 599.0947 107.2461 599.0249 112.877 C
598.8701 125.3398 593.9204 137.3516 585.2529 147.5762 C
576.4888 157.9141 563.9409 166.4072 548.6987 171.7021 C
537.3447 175.6465 524.5039 177.8105 510.626 177.6387 C
497.0791 177.4707 483.4316 174.9424 471.1626 169.9883 C
459.79 165.3965 449.6138 158.7246 441.8232 149.9248 C
438.9482 146.6768 436.4678 143.2998 434.377 139.8301 C
426.5762 126.8926 424.1089 112.5781 426.5923 98.8535 C
429.0942 85.0225 436.6128 71.7393 448.7598 60.9863 C
452.4902 57.6836 456.6465 54.626 461.2168 51.8701 C
477.522 42.04 496.5669 37.54 515.2505 37.9873 C
534.3193 38.4434 552.9883 44.0527 567.9561 54.4063 C
572.1084 57.2783 575.6421 59.9121 578.7134 62.8193 C
581.749 65.6934 584.3423 68.8447 586.6538 72.7813 C
586.8574 73.1289 587.1519 73.3232 587.4502 73.3486 C
587.4502 73.3535 L
587.4502 73.3535 L
f
628.1436 70.8545 m
614.6133 71.5615 600.2817 71.5596 587.958 70.5693 C
585.5781 66.625 582.9297 63.4385 579.8604 60.5322 C
576.6895 57.5303 573.0762 54.835 568.8403 51.9063 C
553.5718 41.3457 534.5693 35.624 515.1895 35.1602 C
496.2261 34.7061 476.8765 39.2852 460.2861 49.2881 C
455.6006 52.1123 451.3511 55.2373 447.5493 58.6025 C
434.9727 69.7363 427.1714 83.582 424.5513 98.0664 C
421.9111 112.6572 424.5166 127.8457 432.7749 141.542 C
434.9629 145.1719 437.5444 148.6904 440.5244 152.0576 C
448.5581 161.1318 459.0029 167.9912 470.6475 172.6934 C
483.1104 177.7256 496.9648 180.293 510.7114 180.4639 C
524.7725 180.6387 537.7891 178.4434 549.3042 174.4434 C
564.8506 169.043 577.6807 160.3428 586.6758 149.7314 C
595.7676 139.0068 600.9609 126.3115 601.1255 113.0488 C
601.1929 107.6201 600.4165 102.1055 598.7207 96.6035 C
607.832 96.1396 619.5791 92.7559 630.9775 88.209 C
645.2383 82.5195 658.9961 74.9932 666.3701 69.0859 C
666.7432 68.8086 666.9512 68.2246 666.8564 67.6133 C
666.7354 66.8438 666.1787 66.3232 665.6113 66.4492 C
656.3701 68.5088 642.7119 70.0928 628.1436 70.8545 C
f
*U
509.6548 169.5889 m
533.8521 169.9189 577.3623 158.0576 586.6431 132.7783 c
603.1636 87.7764 568.8184 38.9307 501.8291 45.3633 c
419.8848 53.2314 399.3901 168.083 509.6548 169.5889 c
Bb
1 (GradientFill 1) 510.623 22.96 89 192.3277 1 0 0 1 0 0 Bg
3.35658 192.2984 209.1121 -3.65006 394.8921 24.9805 Xm
140.8257 8067.9097 209.1121 -3.65006 254.0664 -8042.9297 Bc
3.35658 192.2984 209.1121 -3.65006 394.8921 24.9805 Bm
140.8257 8067.9097 209.1121 -3.65006 398.2485 217.2793 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
590.0518 200.7988 m
596.8955 189.2471 607.2651 175.4131 618.4961 163.0225 C
626.415 154.2861 634.7617 146.2686 642.5996 140.2803 C
637.9814 146.8975 633.124 155.1074 628.4277 164.2383 C
622.2051 176.3389 616.2627 190.0586 611.5376 203.8252 C
611.3008 204.5205 611.5371 205.3701 612.0654 205.7227 C
612.1592 205.7852 612.2549 205.8271 612.3521 205.8516 C
636.6543 212.4502 657.6318 224.5117 672.5684 240.04 C
686.9678 255.0098 695.7246 273.1846 696.3623 292.7393 C
696.3877 293.5146 696.4004 294.2793 696.4004 295.0332 C
696.4004 319.2109 683.8574 341.1377 663.2891 357.3213 C
642.5527 373.6367 613.7061 384.084 581.3037 385.1416 C
579.5234 385.2002 577.7061 385.2295 575.8516 385.2295 C
541.6328 385.2295 510.3311 374.7891 487.3857 357.9092 C
464.6289 341.168 450.1387 318.123 449.3096 292.7441 C
448.6792 273.4346 456.0498 255.4697 469.1538 240.6094 C
482.7573 225.1836 502.519 213.1152 525.9419 206.334 C
535.7119 203.5059 546.7007 201.542 557.7896 200.6582 C
568.4736 199.8066 579.2646 199.9531 589.165 201.29 C
589.5225 201.3379 589.8477 201.1406 590.0513 200.7988 C
590.0518 200.7988 L
590.0518 200.7988 L
f
617.126 160.8076 m
605.9644 173.1211 595.6431 186.8496 588.7261 198.4092 C
578.8696 197.127 568.1675 196.999 557.5728 197.8428 C
546.3477 198.7373 535.2524 200.7178 525.416 203.5654 C
501.6777 210.4375 481.6138 222.709 467.7607 238.418 C
454.186 253.8125 446.5537 272.5234 447.2139 292.7393 C
448.0786 319.2197 463.0098 343.125 486.4492 360.3691 C
509.7002 377.4736 541.3726 388.0537 575.9536 388.0537 C
577.7715 388.0537 579.606 388.0225 581.4551 387.9629 C
614.2075 386.8926 643.3965 376.3086 664.4063 359.7783 C
685.583 343.1152 698.498 320.3779 698.498 295.1602 C
698.498 294.3486 698.4844 293.543 698.459 292.7441 C
697.79 272.2686 688.7168 253.3379 673.8037 237.834 C
658.8828 222.3223 638.085 210.2227 614.0215 203.4561 C
618.6055 190.374 624.2607 177.4014 630.168 165.915 C
636.5391 153.5273 643.2012 142.8691 649.125 135.6689 C
649.501 135.2773 649.623 134.5596 649.3896 133.9414 C
649.1221 133.2314 648.4873 132.9229 647.9727 133.25 C
638.292 139.4199 627.3545 149.5225 617.126 160.8076 C
f
*U
551.0542 371.332 m
620.8076 373.4141 654.6426 350.5098 v
688.4785 327.6064 690.5605 270.3467 668.1768 249.0039 c
645.793 227.6621 571.876 190.7031 512.5342 219.333 c
423.5669 262.2559 454.7168 366.1934 551.0542 371.332 C
Bb
1 (GradientFill 1) 573.5542 167.7363 91 297.387 1 0 0 1 0 0 Bg
-5.19014 297.3417 271.0529 4.73126 423.2622 165.1133 Xm
-141.8199 8124.8242 271.0529 4.73126 565.082 -7959.7109 Bc
-5.19014 297.3417 271.0529 4.73126 423.2622 165.1133 Bm
-141.8199 8124.8242 271.0529 4.73126 418.0723 462.4551 Bc
f
0 BB
U
u
*u
1 1 1 1 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
1155.8818 876.1406 m
1153.4697 872.9443 1150.6992 869.7407 1147.5479 866.7441 C
1144.2559 863.6138 1140.5488 860.7129 1136.4043 858.2891 C
1133.4902 856.585 1130.8398 855.145 1128.4648 853.9321 c
1117.9512 848.5645 1106.0947 837.8359 1119.6357 855.2178 c
1123.8857 860.6729 1129.668 868.4121 1134.7744 876.3384 C
1132.6914 876.519 1130.5039 876.6509 1128.2695 876.7852 C
1111.125 877.8203 1091.2422 879.0215 1091.6611 902.7661 C
1092.3105 939.6606 L
1092.6172 956.9907 1115.1406 959.9023 1135.0049 959.5527 C
1142.4902 959.4209 1149.6094 958.834 1154.9346 958.3955 C
1154.9375 958.395 L
1155.9131 958.3154 1156.8291 958.2393 1157.6748 958.1724 C
1160.0205 957.9883 L
1188.5918 955.7441 1203.0273 954.6099 1209.4805 944.0547 C
1211.9727 939.9775 1213.5518 935.6958 1214.1992 929.4214 C
1214.8311 923.3003 1214.5625 915.2866 1213.377 903.6426 C
1210.5527 875.9058 1177.6025 876.0488 1158.3398 876.1328 C
1157.5107 876.1362 1156.7109 876.1396 1155.8818 876.1406 C
1155.8818 876.1406 L
f
1 D
1146.3926 869.021 m
1149.5645 872.0386 1152.3467 875.2852 1154.7578 878.522 C
1154.958 878.7954 1155.2354 878.9658 1155.5371 878.9648 C
1156.3975 878.9648 1157.4063 878.9604 1158.4502 878.9561 C
1177.0029 878.8755 1208.7393 878.7373 1211.2998 903.8911 C
1212.458 915.2666 1212.7266 923.0439 1212.1221 928.9038 C
1211.5332 934.6094 1210.0977 938.501 1207.834 942.2046 C
1201.9287 951.8633 1187.7891 952.9746 1159.8037 955.1729 C
1157.458 955.3574 L
1156.6104 955.4238 1155.6924 955.5 1154.7139 955.5801 C
1154.71 955.5806 L
1149.4219 956.0161 1142.3525 956.5986 1134.8779 956.7305 C
1116.0352 957.0625 1094.6738 954.5981 1094.4121 939.7212 C
1093.7617 902.8271 L
1093.3896 881.7207 1112.2227 880.583 1128.4609 879.6025 C
1131.4395 879.4229 1134.333 879.248 1137.0186 878.959 C
1137.0186 878.957 L
1137.2188 878.937 1137.415 878.8374 1137.5781 878.6553 C
1138.0137 878.1709 1138.0576 877.2847 1137.6768 876.6763 C
1131.3398 866.5488 1123.6406 856.4683 1118.9941 850.6113 C
1122.4648 852.9502 1127.7422 856.2437 1135.6494 860.8682 C
1139.6406 863.2021 1143.2148 866 1146.3926 869.021 C
f
*U
0 D
1117.1553 950.0859 m
1108.2783 948.5293 1101.96 944.6367 1101.0264 932.7002 c
1100.0918 920.7637 1095.5273 891.4409 1108.9805 887.2896 c
1122.4316 883.1377 1158.7637 883.6914 1174.0977 884.21 c
1189.4316 884.729 1206.0508 892.7388 1207.1826 911.6812 c
1208.0576 926.3218 1209.2656 932.5811 1202.4971 940.4355 C
1195.1416 949.7344 1131.7383 952.644 1117.1553 950.0859 c
Bb
1 (GradientFill 1) 1142.7588 841.312 82 135.4685 1 0 0 1 0 0 Bg
18.8536 134.1501 113.1883 -15.9076 1086.5303 849.2144 Xm
1207.9764 8595.1982 113.1883 -15.9076 -121.4463 -7745.9844 Bc
18.8536 134.1501 113.1883 -15.9076 1086.5303 849.2144 Bm
1207.9764 8595.1982 113.1883 -15.9076 1105.3838 983.3643 Bc
f
0 BB
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
